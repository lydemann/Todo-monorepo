trigger:
  - main
pr:
  - main

variables:
  CI: 'true'
  ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    NX_BRANCH: $(System.PullRequest.PullRequestId) # You can use $(System.PullRequest.PullRequestNumber if your pipeline is triggered by a PR from GitHub ONLY)
    TARGET_BRANCH: $[replace(variables['System.PullRequest.TargetBranch'],'refs/heads/','origin/')]
    BASE_SHA: $(git merge-base $(TARGET_BRANCH) HEAD)
  ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    NX_BRANCH: $(Build.SourceBranchName)
    BASE_SHA: $(git rev-parse HEAD~1)
  HEAD_SHA: $(git rev-parse HEAD)
  PNPM_CACHE_FOLDER: $(Pipeline.Workspace)/.pnpm-store

jobs:
  - job: main
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self
        fetchDepth: 0
        fetchFilter: tree:0
        persistCredentials: true

      # Set Azure Devops CLI default settings
      - bash: az devops configure --defaults organization=$(System.TeamFoundationCollectionUri) project=$(System.TeamProject)
        displayName: 'Set default Azure DevOps organization and project'
      # Get last successfull commit from Azure Devops CLI
      - bash: |
          LAST_SHA=$(az pipelines build list --branch $(Build.SourceBranchName) --definition-ids $(System.DefinitionId) --result succeeded --top 1 --query "[0].triggerInfo.\"ci.sourceSha\"")
          if [ -z "$LAST_SHA" ]
          then
            echo "Last successful commit not found. Using fallback 'HEAD~1': $BASE_SHA"
          else
            echo "Last successful commit SHA: $LAST_SHA"
            echo "##vso[task.setvariable variable=BASE_SHA]$LAST_SHA"
          fi
        displayName: 'Get last successful commit SHA'
        condition: ne(variables['Build.Reason'], 'PullRequest')
        env:
          AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
        
      - task: Cache@2
        inputs:
          key: '"pnpm" | "$(Agent.OS)" | pnpm-lock.yaml'
          restoreKeys: |
            "pnpm" | "$(Agent.OS)"
            "pnpm"
          path: $(PNPM_CACHE_FOLDER)
        displayName: Cache pnpm packages
      - script: |
          mkdir -p $(PNPM_CACHE_FOLDER)
          npm install --global corepack@latest
          corepack enable
          corepack prepare pnpm@latest-10 --activate
          pnpm config set store-dir $(PNPM_CACHE_FOLDER)
        displayName: "Setup pnpm"
      - script: pnpm install

      - script: git branch --track main origin/main
        condition: eq(variables['Build.Reason'], 'PullRequest')

      - script: pnpm nx-cloud start-ci-run --distribute-on="3 linux-medium-js" 
        displayName: Start CI run
      - script: pnpm nx-cloud record -- pnpm nx format:check --base=$(BASE_SHA) --head=$(HEAD_SHA)
        displayName: Check format
      - script: pnpm nx affected --base=$(BASE_SHA) --head=$(HEAD_SHA) --target=lint --parallel=3
        displayName: Run lint
      - script: pnpm nx affected --base=$(BASE_SHA) --head=$(HEAD_SHA) --target=test --parallel=3 --ci --code-coverage
        displayName: Run test
      - script: pnpm nx affected --base=$(BASE_SHA) --head=$(HEAD_SHA) --target=build --parallel=3
        displayName: Run build
      - script: pnpm nx affected --base=$(BASE_SHA) --head=$(HEAD_SHA) --target=mock-tests --parallel=3
        displayName: Run mock-tests
      - script: pnpm nx affected --base=$(BASE_SHA) --head=$(HEAD_SHA) --target=e2e --parallel=3
        displayName: Run e2e
        # archive and publish artifacts
      - task: ArchiveFiles@2
        displayName: Archive Build Artifacts
        condition: always()
        continueOnError: true
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: $(Build.ArtifactStagingDirectory)/build/$(Build.BuildId).zip
      - task: PublishBuildArtifacts@1
        displayName: Publish Build Artifacts
        condition: always()
        continueOnError: true
        inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)/build/$(Build.BuildId).zip
          artifactName: 'drop'

      - script: |
          projects=`npx nx show projects --affected --base=$(BASE_SHA) --head=$(HEAD_SHA)`
          echo "Touched projects:"
          echo $projects

          for project in ${projects//,/ }
          do
            echo "##vso[build.addbuildtag]$project"
            echo "Creating tag for: $project"
          done
        displayName: 'Tag build'

      - script: pnpm nx-cloud stop-all-agents
        condition: always()
        displayName: Stop all Nx-Cloud agents
