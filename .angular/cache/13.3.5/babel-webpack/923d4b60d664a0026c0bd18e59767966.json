{"ast":null,"code":"/**\n * @license Angular v13.3.6\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { ComponentFactoryResolver, NgZone, Injector, ChangeDetectorRef, ApplicationRef, SimpleChange, Version } from '@angular/core';\nimport { ReplaySubject, merge } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Provide methods for scheduling the execution of a callback.\n */\n\nconst scheduler = {\n  /**\n   * Schedule a callback to be called after some delay.\n   *\n   * Returns a function that when executed will cancel the scheduled function.\n   */\n  schedule(taskFn, delay) {\n    const id = setTimeout(taskFn, delay);\n    return () => clearTimeout(id);\n  },\n\n  /**\n   * Schedule a callback to be called before the next render.\n   * (If `window.requestAnimationFrame()` is not available, use `scheduler.schedule()` instead.)\n   *\n   * Returns a function that when executed will cancel the scheduled function.\n   */\n  scheduleBeforeRender(taskFn) {\n    // TODO(gkalpak): Implement a better way of accessing `requestAnimationFrame()`\n    //                (e.g. accounting for vendor prefix, SSR-compatibility, etc).\n    if (typeof window === 'undefined') {\n      // For SSR just schedule immediately.\n      return scheduler.schedule(taskFn, 0);\n    }\n\n    if (typeof window.requestAnimationFrame === 'undefined') {\n      const frameMs = 16;\n      return scheduler.schedule(taskFn, frameMs);\n    }\n\n    const id = window.requestAnimationFrame(taskFn);\n    return () => window.cancelAnimationFrame(id);\n  }\n\n};\n/**\n * Convert a camelCased string to kebab-cased.\n */\n\nfunction camelToDashCase(input) {\n  return input.replace(/[A-Z]/g, char => `-${char.toLowerCase()}`);\n}\n/**\n * Check whether the input is an `Element`.\n */\n\n\nfunction isElement(node) {\n  return !!node && node.nodeType === Node.ELEMENT_NODE;\n}\n/**\n * Check whether the input is a function.\n */\n\n\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n/**\n * Convert a kebab-cased string to camelCased.\n */\n\n\nfunction kebabToCamelCase(input) {\n  return input.replace(/-([a-z\\d])/g, (_, char) => char.toUpperCase());\n}\n\nlet _matches;\n/**\n * Check whether an `Element` matches a CSS selector.\n * NOTE: this is duplicated from @angular/upgrade, and can\n * be consolidated in the future\n */\n\n\nfunction matchesSelector(el, selector) {\n  if (!_matches) {\n    const elProto = Element.prototype;\n    _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector || elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n  }\n\n  return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n}\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n */\n\n\nfunction strictEquals(value1, value2) {\n  return value1 === value2 || value1 !== value1 && value2 !== value2;\n}\n/** Gets a map of default set of attributes to observe and the properties they affect. */\n\n\nfunction getDefaultAttributeToPropertyInputs(inputs) {\n  const attributeToPropertyInputs = {};\n  inputs.forEach(({\n    propName,\n    templateName\n  }) => {\n    attributeToPropertyInputs[camelToDashCase(templateName)] = propName;\n  });\n  return attributeToPropertyInputs;\n}\n/**\n * Gets a component's set of inputs. Uses the injector to get the component factory where the inputs\n * are defined.\n */\n\n\nfunction getComponentInputs(component, injector) {\n  const componentFactoryResolver = injector.get(ComponentFactoryResolver);\n  const componentFactory = componentFactoryResolver.resolveComponentFactory(component);\n  return componentFactory.inputs;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nfunction extractProjectableNodes(host, ngContentSelectors) {\n  const nodes = host.childNodes;\n  const projectableNodes = ngContentSelectors.map(() => []);\n  let wildcardIndex = -1;\n  ngContentSelectors.some((selector, i) => {\n    if (selector === '*') {\n      wildcardIndex = i;\n      return true;\n    }\n\n    return false;\n  });\n\n  for (let i = 0, ii = nodes.length; i < ii; ++i) {\n    const node = nodes[i];\n    const ngContentIndex = findMatchingIndex(node, ngContentSelectors, wildcardIndex);\n\n    if (ngContentIndex !== -1) {\n      projectableNodes[ngContentIndex].push(node);\n    }\n  }\n\n  return projectableNodes;\n}\n\nfunction findMatchingIndex(node, selectors, defaultIndex) {\n  let matchingIndex = defaultIndex;\n\n  if (isElement(node)) {\n    selectors.some((selector, i) => {\n      if (selector !== '*' && matchesSelector(node, selector)) {\n        matchingIndex = i;\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  return matchingIndex;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Time in milliseconds to wait before destroying the component ref when disconnected. */\n\n\nconst DESTROY_DELAY = 10;\n/**\n * Factory that creates new ComponentNgElementStrategy instance. Gets the component factory with the\n * constructor's injector's factory resolver and passes that factory to each strategy.\n *\n * @publicApi\n */\n\nclass ComponentNgElementStrategyFactory {\n  constructor(component, injector) {\n    this.componentFactory = injector.get(ComponentFactoryResolver).resolveComponentFactory(component);\n  }\n\n  create(injector) {\n    return new ComponentNgElementStrategy(this.componentFactory, injector);\n  }\n\n}\n/**\n * Creates and destroys a component ref using a component factory and handles change detection\n * in response to input changes.\n *\n * @publicApi\n */\n\n\nclass ComponentNgElementStrategy {\n  constructor(componentFactory, injector) {\n    this.componentFactory = componentFactory;\n    this.injector = injector; // Subject of `NgElementStrategyEvent` observables corresponding to the component's outputs.\n\n    this.eventEmitters = new ReplaySubject(1);\n    /** Merged stream of the component's output events. */\n\n    this.events = this.eventEmitters.pipe(switchMap(emitters => merge(...emitters)));\n    /** Reference to the component that was created on connect. */\n\n    this.componentRef = null;\n    /** Reference to the component view's `ChangeDetectorRef`. */\n\n    this.viewChangeDetectorRef = null;\n    /**\n     * Changes that have been made to component inputs since the last change detection run.\n     * (NOTE: These are only recorded if the component implements the `OnChanges` interface.)\n     */\n\n    this.inputChanges = null;\n    /** Whether changes have been made to component inputs since the last change detection run. */\n\n    this.hasInputChanges = false;\n    /** Whether the created component implements the `OnChanges` interface. */\n\n    this.implementsOnChanges = false;\n    /** Whether a change detection has been scheduled to run on the component. */\n\n    this.scheduledChangeDetectionFn = null;\n    /** Callback function that when called will cancel a scheduled destruction on the component. */\n\n    this.scheduledDestroyFn = null;\n    /** Initial input values that were set before the component was created. */\n\n    this.initialInputValues = new Map();\n    /**\n     * Set of component inputs that have not yet changed, i.e. for which `recordInputChange()` has not\n     * fired.\n     * (This helps detect the first change of an input, even if it is explicitly set to `undefined`.)\n     */\n\n    this.unchangedInputs = new Set(this.componentFactory.inputs.map(({\n      propName\n    }) => propName));\n    /** Service for setting zone context. */\n\n    this.ngZone = this.injector.get(NgZone);\n    /** The zone the element was created in or `null` if Zone.js is not loaded. */\n\n    this.elementZone = typeof Zone === 'undefined' ? null : this.ngZone.run(() => Zone.current);\n  }\n  /**\n   * Initializes a new component if one has not yet been created and cancels any scheduled\n   * destruction.\n   */\n\n\n  connect(element) {\n    this.runInZone(() => {\n      // If the element is marked to be destroyed, cancel the task since the component was\n      // reconnected\n      if (this.scheduledDestroyFn !== null) {\n        this.scheduledDestroyFn();\n        this.scheduledDestroyFn = null;\n        return;\n      }\n\n      if (this.componentRef === null) {\n        this.initializeComponent(element);\n      }\n    });\n  }\n  /**\n   * Schedules the component to be destroyed after some small delay in case the element is just\n   * being moved across the DOM.\n   */\n\n\n  disconnect() {\n    this.runInZone(() => {\n      // Return if there is no componentRef or the component is already scheduled for destruction\n      if (this.componentRef === null || this.scheduledDestroyFn !== null) {\n        return;\n      } // Schedule the component to be destroyed after a small timeout in case it is being\n      // moved elsewhere in the DOM\n\n\n      this.scheduledDestroyFn = scheduler.schedule(() => {\n        if (this.componentRef !== null) {\n          this.componentRef.destroy();\n          this.componentRef = null;\n          this.viewChangeDetectorRef = null;\n        }\n      }, DESTROY_DELAY);\n    });\n  }\n  /**\n   * Returns the component property value. If the component has not yet been created, the value is\n   * retrieved from the cached initialization values.\n   */\n\n\n  getInputValue(property) {\n    return this.runInZone(() => {\n      if (this.componentRef === null) {\n        return this.initialInputValues.get(property);\n      }\n\n      return this.componentRef.instance[property];\n    });\n  }\n  /**\n   * Sets the input value for the property. If the component has not yet been created, the value is\n   * cached and set when the component is created.\n   */\n\n\n  setInputValue(property, value) {\n    this.runInZone(() => {\n      if (this.componentRef === null) {\n        this.initialInputValues.set(property, value);\n        return;\n      } // Ignore the value if it is strictly equal to the current value, except if it is `undefined`\n      // and this is the first change to the value (because an explicit `undefined` _is_ strictly\n      // equal to not having a value set at all, but we still need to record this as a change).\n\n\n      if (strictEquals(value, this.getInputValue(property)) && !(value === undefined && this.unchangedInputs.has(property))) {\n        return;\n      } // Record the changed value and update internal state to reflect the fact that this input has\n      // changed.\n\n\n      this.recordInputChange(property, value);\n      this.unchangedInputs.delete(property);\n      this.hasInputChanges = true; // Update the component instance and schedule change detection.\n\n      this.componentRef.instance[property] = value;\n      this.scheduleDetectChanges();\n    });\n  }\n  /**\n   * Creates a new component through the component factory with the provided element host and\n   * sets up its initial inputs, listens for outputs changes, and runs an initial change detection.\n   */\n\n\n  initializeComponent(element) {\n    const childInjector = Injector.create({\n      providers: [],\n      parent: this.injector\n    });\n    const projectableNodes = extractProjectableNodes(element, this.componentFactory.ngContentSelectors);\n    this.componentRef = this.componentFactory.create(childInjector, projectableNodes, element);\n    this.viewChangeDetectorRef = this.componentRef.injector.get(ChangeDetectorRef);\n    this.implementsOnChanges = isFunction(this.componentRef.instance.ngOnChanges);\n    this.initializeInputs();\n    this.initializeOutputs(this.componentRef);\n    this.detectChanges();\n    const applicationRef = this.injector.get(ApplicationRef);\n    applicationRef.attachView(this.componentRef.hostView);\n  }\n  /** Set any stored initial inputs on the component's properties. */\n\n\n  initializeInputs() {\n    this.componentFactory.inputs.forEach(({\n      propName\n    }) => {\n      if (this.initialInputValues.has(propName)) {\n        // Call `setInputValue()` now that the component has been instantiated to update its\n        // properties and fire `ngOnChanges()`.\n        this.setInputValue(propName, this.initialInputValues.get(propName));\n      }\n    });\n    this.initialInputValues.clear();\n  }\n  /** Sets up listeners for the component's outputs so that the events stream emits the events. */\n\n\n  initializeOutputs(componentRef) {\n    const eventEmitters = this.componentFactory.outputs.map(({\n      propName,\n      templateName\n    }) => {\n      const emitter = componentRef.instance[propName];\n      return emitter.pipe(map(value => ({\n        name: templateName,\n        value\n      })));\n    });\n    this.eventEmitters.next(eventEmitters);\n  }\n  /** Calls ngOnChanges with all the inputs that have changed since the last call. */\n\n\n  callNgOnChanges(componentRef) {\n    if (!this.implementsOnChanges || this.inputChanges === null) {\n      return;\n    } // Cache the changes and set inputChanges to null to capture any changes that might occur\n    // during ngOnChanges.\n\n\n    const inputChanges = this.inputChanges;\n    this.inputChanges = null;\n    componentRef.instance.ngOnChanges(inputChanges);\n  }\n  /**\n   * Marks the component view for check, if necessary.\n   * (NOTE: This is required when the `ChangeDetectionStrategy` is set to `OnPush`.)\n   */\n\n\n  markViewForCheck(viewChangeDetectorRef) {\n    if (this.hasInputChanges) {\n      this.hasInputChanges = false;\n      viewChangeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * Schedules change detection to run on the component.\n   * Ignores subsequent calls if already scheduled.\n   */\n\n\n  scheduleDetectChanges() {\n    if (this.scheduledChangeDetectionFn) {\n      return;\n    }\n\n    this.scheduledChangeDetectionFn = scheduler.scheduleBeforeRender(() => {\n      this.scheduledChangeDetectionFn = null;\n      this.detectChanges();\n    });\n  }\n  /**\n   * Records input changes so that the component receives SimpleChanges in its onChanges function.\n   */\n\n\n  recordInputChange(property, currentValue) {\n    // Do not record the change if the component does not implement `OnChanges`.\n    if (!this.implementsOnChanges) {\n      return;\n    }\n\n    if (this.inputChanges === null) {\n      this.inputChanges = {};\n    } // If there already is a change, modify the current value to match but leave the values for\n    // `previousValue` and `isFirstChange`.\n\n\n    const pendingChange = this.inputChanges[property];\n\n    if (pendingChange) {\n      pendingChange.currentValue = currentValue;\n      return;\n    }\n\n    const isFirstChange = this.unchangedInputs.has(property);\n    const previousValue = isFirstChange ? undefined : this.getInputValue(property);\n    this.inputChanges[property] = new SimpleChange(previousValue, currentValue, isFirstChange);\n  }\n  /** Runs change detection on the component. */\n\n\n  detectChanges() {\n    if (this.componentRef === null) {\n      return;\n    }\n\n    this.callNgOnChanges(this.componentRef);\n    this.markViewForCheck(this.viewChangeDetectorRef);\n    this.componentRef.changeDetectorRef.detectChanges();\n  }\n  /** Runs in the angular zone, if present. */\n\n\n  runInZone(fn) {\n    return this.elementZone && Zone.current !== this.elementZone ? this.ngZone.run(fn) : fn();\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Implements the functionality needed for a custom element.\n *\n * @publicApi\n */\n\n\nclass NgElement extends HTMLElement {\n  constructor() {\n    super(...arguments);\n    /**\n     * A subscription to change, connect, and disconnect events in the custom element.\n     */\n\n    this.ngElementEventsSubscription = null;\n  }\n\n}\n/**\n *  @description Creates a custom element class based on an Angular component.\n *\n * Builds a class that encapsulates the functionality of the provided component and\n * uses the configuration information to provide more context to the class.\n * Takes the component factory's inputs and outputs to convert them to the proper\n * custom element API and add hooks to input changes.\n *\n * The configuration's injector is the initial injector set on the class,\n * and used by default for each created instance.This behavior can be overridden with the\n * static property to affect all newly created instances, or as a constructor argument for\n * one-off creations.\n *\n * @see [Angular Elements Overview](guide/elements \"Turning Angular components into custom elements\")\n *\n * @param component The component to transform.\n * @param config A configuration that provides initialization information to the created class.\n * @returns The custom-element construction class, which can be registered with\n * a browser's `CustomElementRegistry`.\n *\n * @publicApi\n */\n\n\nfunction createCustomElement(component, config) {\n  const inputs = getComponentInputs(component, config.injector);\n  const strategyFactory = config.strategyFactory || new ComponentNgElementStrategyFactory(component, config.injector);\n  const attributeToPropertyInputs = getDefaultAttributeToPropertyInputs(inputs);\n\n  class NgElementImpl extends NgElement {\n    constructor(injector) {\n      super();\n      this.injector = injector;\n    }\n\n    get ngElementStrategy() {\n      // NOTE:\n      // Some polyfills (e.g. `document-register-element`) do not call the constructor, therefore\n      // it is not safe to set `ngElementStrategy` in the constructor and assume it will be\n      // available inside the methods.\n      //\n      // TODO(andrewseguin): Add e2e tests that cover cases where the constructor isn't called. For\n      // now this is tested using a Google internal test suite.\n      if (!this._ngElementStrategy) {\n        const strategy = this._ngElementStrategy = strategyFactory.create(this.injector || config.injector); // Re-apply pre-existing input values (set as properties on the element) through the\n        // strategy.\n\n        inputs.forEach(({\n          propName\n        }) => {\n          if (!this.hasOwnProperty(propName)) {\n            // No pre-existing value for `propName`.\n            return;\n          } // Delete the property from the instance and re-apply it through the strategy.\n\n\n          const value = this[propName];\n          delete this[propName];\n          strategy.setInputValue(propName, value);\n        });\n      }\n\n      return this._ngElementStrategy;\n    }\n\n    attributeChangedCallback(attrName, oldValue, newValue, namespace) {\n      const propName = attributeToPropertyInputs[attrName];\n      this.ngElementStrategy.setInputValue(propName, newValue);\n    }\n\n    connectedCallback() {\n      // For historical reasons, some strategies may not have initialized the `events` property\n      // until after `connect()` is run. Subscribe to `events` if it is available before running\n      // `connect()` (in order to capture events emitted during initialization), otherwise subscribe\n      // afterwards.\n      //\n      // TODO: Consider deprecating/removing the post-connect subscription in a future major version\n      //       (e.g. v11).\n      let subscribedToEvents = false;\n\n      if (this.ngElementStrategy.events) {\n        // `events` are already available: Subscribe to it asap.\n        this.subscribeToEvents();\n        subscribedToEvents = true;\n      }\n\n      this.ngElementStrategy.connect(this);\n\n      if (!subscribedToEvents) {\n        // `events` were not initialized before running `connect()`: Subscribe to them now.\n        // The events emitted during the component initialization have been missed, but at least\n        // future events will be captured.\n        this.subscribeToEvents();\n      }\n    }\n\n    disconnectedCallback() {\n      // Not using `this.ngElementStrategy` to avoid unnecessarily creating the `NgElementStrategy`.\n      if (this._ngElementStrategy) {\n        this._ngElementStrategy.disconnect();\n      }\n\n      if (this.ngElementEventsSubscription) {\n        this.ngElementEventsSubscription.unsubscribe();\n        this.ngElementEventsSubscription = null;\n      }\n    }\n\n    subscribeToEvents() {\n      // Listen for events from the strategy and dispatch them as custom events.\n      this.ngElementEventsSubscription = this.ngElementStrategy.events.subscribe(e => {\n        const customEvent = new CustomEvent(e.name, {\n          detail: e.value\n        });\n        this.dispatchEvent(customEvent);\n      });\n    }\n\n  } // Work around a bug in closure typed optimizations(b/79557487) where it is not honoring static\n  // field externs. So using quoted access to explicitly prevent renaming.\n\n\n  NgElementImpl['observedAttributes'] = Object.keys(attributeToPropertyInputs); // Add getters and setters to the prototype for each property input.\n\n  inputs.forEach(({\n    propName\n  }) => {\n    Object.defineProperty(NgElementImpl.prototype, propName, {\n      get() {\n        return this.ngElementStrategy.getInputValue(propName);\n      },\n\n      set(newValue) {\n        this.ngElementStrategy.setInputValue(propName, newValue);\n      },\n\n      configurable: true,\n      enumerable: true\n    });\n  });\n  return NgElementImpl;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @publicApi\n */\n\n\nconst VERSION = /*#__PURE__*/new Version('13.3.6');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgElement, VERSION, createCustomElement }; //# sourceMappingURL=elements.mjs.map","map":null,"metadata":{},"sourceType":"module"}