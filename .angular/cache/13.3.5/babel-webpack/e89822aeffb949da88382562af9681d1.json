{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Input } from '@angular/core';\nimport { ButtonParentComponent } from './button-parent-component';\nexport class ButtonChildComponent {\n  get iconButton() {\n    return this.parent.iconButton;\n  }\n\n  get type() {\n    return this.parent.type;\n  }\n\n  get text() {\n    return this.parent.text;\n  }\n\n  get disabled() {\n    return this.parent.disabled;\n  }\n\n  get buttonStyle() {\n    return this.parent.buttonStyle;\n  }\n\n  get buttonClass() {\n    return this.parent.buttonClass;\n  }\n\n  clicked() {\n    this.parent.clicked.emit();\n  }\n\n  onClick() {\n    if (!this.disabled) {\n      this.clicked();\n    }\n  }\n\n}\n\n__decorate([Input(), __metadata(\"design:type\", ButtonParentComponent)], ButtonChildComponent.prototype, \"parent\", void 0);","map":null,"metadata":{},"sourceType":"module"}