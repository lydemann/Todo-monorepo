{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { first, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let FeatureToggleService = /*#__PURE__*/(() => {\n  class FeatureToggleService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.enabledFeatures = [];\n    }\n\n    hasFlags(toCheck) {\n      const flagsToCheck = Array.isArray(toCheck) ? toCheck : [toCheck];\n      return flagsToCheck.some(flagToCheck => this.enabledFeatures.some(enabledFeatureFlag => flagToCheck === enabledFeatureFlag));\n    }\n\n    getFeatureFlags(userId) {\n      return this.httpClient.get('/assets/feature-flags.json?userId=' + userId).pipe(first(), tap(features => {\n        if (!features) {\n          throw new Error('No features!');\n        }\n\n        this.enabledFeatures = this.getEnabledFlags(features);\n      }));\n    }\n\n    getEnabledFlags(features) {\n      const enabledFeatures = [];\n\n      for (const key in features) {\n        if (features.hasOwnProperty(key)) {\n          const isEnabled = features[key];\n\n          if (isEnabled) {\n            enabledFeatures.push(key);\n          }\n        }\n      }\n\n      return enabledFeatures;\n    }\n\n  }\n\n  FeatureToggleService.ɵfac = function FeatureToggleService_Factory(t) {\n    return new (t || FeatureToggleService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  FeatureToggleService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FeatureToggleService,\n    factory: FeatureToggleService.ɵfac\n  });\n  return FeatureToggleService;\n})();","map":null,"metadata":{},"sourceType":"module"}