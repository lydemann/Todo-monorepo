{"ast":null,"code":"import { getLocaleNumberSymbol, NumberSymbol } from '@angular/common';\nimport { ElementRef, LOCALE_ID } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\n/**\n * Directive for formatting input values as you type.\n * Supports these features:\n * #1: Converts thousand to decimal separator on type (thousandToDecimalSeparatorEnabled: true)\n * #2: Adds thousand separators to input value (thousandSeparatorEnabled: true)\n * #3: Removed decimals (decimalsEnabled: false)\n * This will also make sure to keep same input cursor position on update.\n *\n * Example:\n * ```\n *  <input appNumberInput [thousandToDecimalSeparatorEnabled]=\"true\" [thousandSeparatorEnabled]=\"true\" [decimalsEnabled]=\"false\" [formControl]=\"someFormControl\" />\n * ```\n */\n\nexport let NumberInputDirective = /*#__PURE__*/(() => {\n  class NumberInputDirective {\n    constructor(ngControl, locale, hostElement) {\n      this.ngControl = ngControl;\n      this.locale = locale;\n      this.hostElement = hostElement;\n      this.thousandToDecimalSeparatorEnabled = true;\n      this.thousandSeparatorEnabled = true;\n      this.decimalsEnabled = true;\n      this.destroy$ = new Subject();\n      this.lastValue = '';\n\n      if (!hostElement.nativeElement.setSelectionRange) {\n        throw new Error(\"'appNumberInput' can only be applied to input element\");\n      }\n    }\n\n    ngOnInit() {\n      this.groupingSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyGroup);\n      this.decimalSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyDecimal);\n      this.lastValue = this.hostElement.nativeElement.value;\n      return this.ngControl.valueChanges.pipe(takeUntil(this.destroy$), map(value => value || ''), map(value => this.convertThousandToDecimalSeparator(value)), map(value => {\n        return this.formatThousandSeparator(value);\n      }), map(value => {\n        return this.formatNoDecimals(value);\n      })).subscribe(val => {\n        this.lastValue = val;\n      });\n    }\n\n    ngOnDestroy() {\n      this.destroy$.next();\n    }\n\n    formatNoDecimals(value) {\n      if (this.decimalsEnabled) {\n        return value;\n      }\n\n      const decimalIdx = value.indexOf(this.decimalSeparator);\n      const noDecimalVal = decimalIdx !== -1 ? value.substring(0, decimalIdx) : value;\n      const inputElm = this.hostElement.nativeElement;\n      this.updateVal(noDecimalVal, inputElm, inputElm.selectionStart);\n      return noDecimalVal;\n    }\n\n    formatThousandSeparator(value) {\n      if (!this.thousandSeparatorEnabled) {\n        return value;\n      }\n\n      const inputElement = this.hostElement.nativeElement;\n      const cursorPosition = inputElement.selectionStart;\n      const lengthBeforeFormatting = value.length;\n      const formattedVal = this.getNumberWithThousandSeparator(value, this.groupingSeparator, this.decimalSeparator);\n      const newCursorPosition = this.getCursorPositionAfterFormatting(formattedVal, lengthBeforeFormatting, cursorPosition);\n      this.updateVal(formattedVal, inputElement, newCursorPosition);\n      return formattedVal;\n    }\n\n    getCursorPositionAfterFormatting(formattedVal, lengthBeforeFormatting, cursorPosition) {\n      const lengthAfterFormatting = formattedVal.length;\n\n      if (lengthBeforeFormatting === lengthAfterFormatting + 1) {\n        cursorPosition = cursorPosition - 1;\n      }\n\n      if (lengthBeforeFormatting === lengthAfterFormatting - 1) {\n        cursorPosition = cursorPosition + 1;\n      }\n\n      return cursorPosition;\n    }\n\n    convertThousandToDecimalSeparator(value) {\n      if (!this.thousandToDecimalSeparatorEnabled) {\n        return value;\n      }\n\n      let val = value;\n      const hasAddedThousandSeparator = this.hasAddedThousandSeparator(val, this.lastValue);\n\n      if (hasAddedThousandSeparator) {\n        const inputElement = this.hostElement.nativeElement;\n        const cursorPosition = inputElement.selectionStart;\n        val = this.replaceAt(val, cursorPosition - 1, this.decimalSeparator);\n        this.updateVal(val, inputElement, cursorPosition);\n      }\n\n      return val;\n    }\n\n    replaceAt(val, index, replacement) {\n      return val.substr(0, index) + replacement + val.substr(index + replacement.length);\n    }\n\n    hasAddedThousandSeparator(diffSource, diffBy) {\n      const isOneCharAdded = diffSource.length === diffBy.length + 1;\n\n      if (!isOneCharAdded) {\n        return false;\n      }\n\n      const isThousandSeparatorAdded = diffSource.split(this.groupingSeparator).length > diffBy.split(this.groupingSeparator).length;\n      return isThousandSeparatorAdded;\n    }\n\n    getNumberWithThousandSeparator(num, groupingSeparator, decimalSeparator) {\n      const decimalIdx = num.indexOf(decimalSeparator);\n      const beforeWithThousandSeparators = this.getFormattedBeforeDecimalPartOfNumber(decimalIdx, num, groupingSeparator);\n      const decimalStr = this.getDecimalPartOfNumber(decimalIdx, num);\n      const formattedVal = beforeWithThousandSeparators + decimalStr;\n      return formattedVal;\n    }\n\n    getFormattedBeforeDecimalPartOfNumber(decimalIdx, num, groupingSeparator) {\n      const beforeDecimalStr = decimalIdx > 0 ? num.substring(0, decimalIdx + 1) : num;\n      const beforeWithoutThousandSeparators = this.getValWithoutThousandSeparators(beforeDecimalStr);\n      const onlyContains0Regex = /^[0.,]*$/;\n      const trimmedBeforeDecimals = beforeWithoutThousandSeparators.length > 1 ? beforeWithoutThousandSeparators.replace(/^0+/, onlyContains0Regex.test(beforeWithoutThousandSeparators) ? '0' : '') : beforeWithoutThousandSeparators;\n      const beforeWithThousandSeparators = trimmedBeforeDecimals.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, `$1${groupingSeparator}`);\n      return beforeWithThousandSeparators;\n    }\n\n    getValWithoutThousandSeparators(beforeDecimalStr) {\n      const groupingSeparatorRegex = new RegExp(`\\\\${this.groupingSeparator}`, 'g');\n      return beforeDecimalStr.replace(groupingSeparatorRegex, '');\n    }\n\n    getDecimalPartOfNumber(decimalIdx, num) {\n      const decimalPart = decimalIdx > 0 ? num.substring(decimalIdx + 1) : null;\n      const decimalStr = decimalPart ? decimalPart : '';\n      return decimalStr;\n    }\n\n    updateVal(formattedVal, inputElement, cursorPosition) {\n      if (!formattedVal) {\n        return;\n      }\n\n      this.ngControl.control.setValue(formattedVal, {\n        emitEvent: false,\n        onlySelf: true\n      });\n      const valWithoutThousandSeparator = this.getValWithoutThousandSeparators(formattedVal); // This is for setting the formControl value without thousand separators but not reflecting it in the view\n\n      this.ngControl.control.setValue(valWithoutThousandSeparator, {\n        emitEvent: false,\n        emitModelToViewChange: false\n      });\n      inputElement.setSelectionRange(cursorPosition, cursorPosition);\n    }\n\n  }\n\n  NumberInputDirective.ɵfac = function NumberInputDirective_Factory(t) {\n    return new (t || NumberInputDirective)(i0.ɵɵdirectiveInject(i1.NgControl), i0.ɵɵdirectiveInject(LOCALE_ID), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  NumberInputDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: NumberInputDirective,\n    selectors: [[\"\", \"appNumberInput\", \"\"]],\n    inputs: {\n      thousandToDecimalSeparatorEnabled: \"thousandToDecimalSeparatorEnabled\",\n      thousandSeparatorEnabled: \"thousandSeparatorEnabled\",\n      decimalsEnabled: \"decimalsEnabled\"\n    }\n  });\n  return NumberInputDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}