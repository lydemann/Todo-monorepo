{"ast":null,"code":"import { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { TodoListResourcesService } from '../resources/todo-list-resources.service';\nimport { TodoListActions } from './todo-list.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../resources/todo-list-resources.service\";\nexport let TodoListEffects = /*#__PURE__*/(() => {\n  class TodoListEffects {\n    constructor(actions$, todoListResourcesService) {\n      this.actions$ = actions$;\n      this.todoListResourcesService = todoListResourcesService;\n      this.getTodoListRequest$ = createEffect(() => this.actions$.pipe(ofType(TodoListActions.getTodoListRequest), exhaustMap(() => this.todoListResourcesService.getTodos().pipe(map(todoList => TodoListActions.getTodoListResponse({\n        todoList\n      })), catchError(error => of(TodoListActions.getTodoListFailed({\n        error\n      })))))));\n      this.saveTodoItemRequest$ = createEffect(() => this.actions$.pipe(ofType(TodoListActions.saveTodoItemRequest), map(action => {\n        if (!!action.todoItem.id) {\n          return TodoListActions.updateTodoItemRequest({\n            todoItem: action.todoItem\n          });\n        } else {\n          return TodoListActions.addTodoItemRequest({\n            todoItem: action.todoItem\n          });\n        }\n      })));\n      this.updateTodoItemRequest$ = createEffect(() => this.actions$.pipe(ofType(TodoListActions.updateTodoItemRequest), exhaustMap(action => this.todoListResourcesService.updateTodoItem(action.todoItem).pipe(map(todoItm => {\n        return TodoListActions.updateTodoItemResponse({\n          todoItem: todoItm\n        });\n      }), catchError(error => of(TodoListActions.updateTodoItemFailed({\n        error\n      })))))));\n      this.addTodoItemRequest$ = createEffect(() => this.actions$.pipe(ofType(TodoListActions.addTodoItemRequest), exhaustMap(action => this.todoListResourcesService.addTodoItem(action.todoItem).pipe(map(todoItm => {\n        return TodoListActions.addTodoItemReponse({\n          todoItem: todoItm\n        });\n      }), catchError(error => of(TodoListActions.addTodoItemFailed({\n        error\n      })))))));\n    }\n\n  }\n\n  TodoListEffects.ɵfac = function TodoListEffects_Factory(t) {\n    return new (t || TodoListEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.TodoListResourcesService));\n  };\n\n  TodoListEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TodoListEffects,\n    factory: TodoListEffects.ɵfac\n  });\n  return TodoListEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}