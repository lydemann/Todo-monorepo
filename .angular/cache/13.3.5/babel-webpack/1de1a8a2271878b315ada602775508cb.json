{"ast":null,"code":"import { BrowserNames } from './browser-names.enum';\nimport * as i0 from \"@angular/core\";\nexport let BrowserDetectorService = /*#__PURE__*/(() => {\n  class BrowserDetectorService {\n    isIE11() {\n      return this.getVendorAndVersion() === 'IE 11';\n    }\n\n    isSafari() {\n      return this.getVendorAndVersion().toLocaleLowerCase().indexOf('Safari'.toLocaleLowerCase()) >= 0;\n    }\n    /**\n     * Snippet inspiration taken from:\n     * https://stackoverflow.com/questions/5916900/how-can-you-detect-the-version-of-a-browser\n     */\n\n\n    getVendorAndVersion() {\n      const navigatorRef = window.navigator;\n      const ua = navigatorRef.userAgent;\n      const agentStrings = this.getAgentStrings(navigatorRef.userAgent);\n      let temp;\n\n      if (this.isIEAgent(agentStrings[1])) {\n        return this.getIEString(ua);\n      }\n\n      if (this.isChromeAgent(agentStrings[1])) {\n        temp = ua.match(/\\b(OPR|Edge)\\/(\\d+)/); // Seems like Opera is a \"sub-class\" of the Chrome agent.\n\n        if (temp !== null) {\n          return temp.slice(1).join(' ').replace(BrowserNames.OperaShort, BrowserNames.Opera);\n        }\n      }\n\n      temp = navigatorRef.userAgent.match(/version\\/(\\d+)/i);\n      const match = agentStrings[2] ? [agentStrings[1], agentStrings[2]] : [navigatorRef.appName, navigatorRef.appVersion, '-?'];\n\n      if (temp != null) {\n        match.splice(1, 1, temp[1]);\n      }\n\n      return match.join(' ');\n    }\n\n    getIEString(userAgent) {\n      const temp = /\\brv[ :]+(\\d+)/g.exec(userAgent) || [];\n      return `${BrowserNames.IE} ${temp[1] || ''}`;\n    }\n\n    isIEAgent(userAgent) {\n      return /trident/i.test(userAgent);\n    }\n\n    isChromeAgent(userAgent) {\n      return userAgent === BrowserNames.Chrome;\n    }\n\n    getAgentStrings(userAgent) {\n      return userAgent.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n    }\n\n  }\n\n  BrowserDetectorService.ɵfac = function BrowserDetectorService_Factory(t) {\n    return new (t || BrowserDetectorService)();\n  };\n\n  BrowserDetectorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BrowserDetectorService,\n    factory: BrowserDetectorService.ɵfac,\n    providedIn: 'root'\n  });\n  return BrowserDetectorService;\n})();","map":null,"metadata":{},"sourceType":"module"}