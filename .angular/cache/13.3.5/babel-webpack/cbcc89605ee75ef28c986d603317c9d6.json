{"ast":null,"code":"import * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Attribute, Inject, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, DOWN_ARROW, RIGHT_ARROW, UP_ARROW, LEFT_ARROW, HOME, END, PAGE_DOWN, PAGE_UP } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { Subscription } from 'rxjs';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i2 from '@angular/cdk/bidi';\nconst _c0 = [\"sliderWrapper\"];\nconst activeEventOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: false\n});\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\n\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/** The thumb gap size for a disabled slider. */\n\nconst DISABLED_THUMB_GAP = 7;\n/** The thumb gap size for a non-active slider at its minimum value. */\n\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/** The thumb gap size for an active slider at its minimum value. */\n\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\n\nconst MAT_SLIDER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => MatSlider),\n  multi: true\n};\n/** A simple change event emitted by the MatSlider component. */\n\nclass MatSliderChange {} // Boilerplate for applying mixins to MatSlider.\n\n/** @docs-private */\n\n\nconst _MatSliderBase = /*#__PURE__*/mixinTabIndex( /*#__PURE__*/mixinColor( /*#__PURE__*/mixinDisabled(class {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}), 'accent'));\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n\n\nlet MatSlider = /*#__PURE__*/(() => {\n  class MatSlider extends _MatSliderBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, _ngZone, _document, _animationMode) {\n      super(elementRef);\n      this._focusMonitor = _focusMonitor;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._dir = _dir;\n      this._ngZone = _ngZone;\n      this._animationMode = _animationMode;\n      this._invert = false;\n      this._max = 100;\n      this._min = 0;\n      this._step = 1;\n      this._thumbLabel = false;\n      this._tickInterval = 0;\n      this._value = null;\n      this._vertical = false;\n      /** Event emitted when the slider value has changed. */\n\n      this.change = new EventEmitter();\n      /** Event emitted when the slider thumb moves. */\n\n      this.input = new EventEmitter();\n      /**\n       * Emits when the raw value of the slider changes. This is here primarily\n       * to facilitate the two-way binding for the `value` input.\n       * @docs-private\n       */\n\n      this.valueChange = new EventEmitter();\n      /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n\n      this.onTouched = () => {};\n\n      this._percent = 0;\n      /**\n       * Whether or not the thumb is sliding and what the user is using to slide it with.\n       * Used to determine if there should be a transition for the thumb and fill track.\n       */\n\n      this._isSliding = null;\n      /**\n       * Whether or not the slider is active (clicked or sliding).\n       * Used to shrink and grow the thumb as according to the Material Design spec.\n       */\n\n      this._isActive = false;\n      /** The size of a tick interval as a percentage of the size of the track. */\n\n      this._tickIntervalPercent = 0;\n      /** The dimensions of the slider. */\n\n      this._sliderDimensions = null;\n\n      this._controlValueAccessorChangeFn = () => {};\n      /** Subscription to the Directionality change EventEmitter. */\n\n\n      this._dirChangeSubscription = Subscription.EMPTY;\n      /** Called when the user has put their pointer down on the slider. */\n\n      this._pointerDown = event => {\n        // Don't do anything if the slider is disabled or the\n        // user is using anything other than the main mouse button.\n        if (this.disabled || this._isSliding || !isTouchEvent(event) && event.button !== 0) {\n          return;\n        }\n\n        this._ngZone.run(() => {\n          this._touchId = isTouchEvent(event) ? getTouchIdForSlider(event, this._elementRef.nativeElement) : undefined;\n          const pointerPosition = getPointerPositionOnPage(event, this._touchId);\n\n          if (pointerPosition) {\n            const oldValue = this.value;\n            this._isSliding = 'pointer';\n            this._lastPointerEvent = event;\n\n            this._focusHostElement();\n\n            this._onMouseenter(); // Simulate mouseenter in case this is a mobile device.\n\n\n            this._bindGlobalEvents(event);\n\n            this._focusHostElement();\n\n            this._updateValueFromPosition(pointerPosition);\n\n            this._valueOnSlideStart = oldValue; // Despite the fact that we explicitly bind active events, in some cases the browser\n            // still dispatches non-cancelable events which cause this call to throw an error.\n            // There doesn't appear to be a good way of avoiding them. See #23820.\n\n            if (event.cancelable) {\n              event.preventDefault();\n            } // Emit a change and input event if the value changed.\n\n\n            if (oldValue != this.value) {\n              this._emitInputEvent();\n            }\n          }\n        });\n      };\n      /**\n       * Called when the user has moved their pointer after\n       * starting to drag. Bound on the document level.\n       */\n\n\n      this._pointerMove = event => {\n        if (this._isSliding === 'pointer') {\n          const pointerPosition = getPointerPositionOnPage(event, this._touchId);\n\n          if (pointerPosition) {\n            // Prevent the slide from selecting anything else.\n            event.preventDefault();\n            const oldValue = this.value;\n            this._lastPointerEvent = event;\n\n            this._updateValueFromPosition(pointerPosition); // Native range elements always emit `input` events when the value changed while sliding.\n\n\n            if (oldValue != this.value) {\n              this._emitInputEvent();\n            }\n          }\n        }\n      };\n      /** Called when the user has lifted their pointer. Bound on the document level. */\n\n\n      this._pointerUp = event => {\n        if (this._isSliding === 'pointer') {\n          if (!isTouchEvent(event) || typeof this._touchId !== 'number' || // Note that we use `changedTouches`, rather than `touches` because it\n          // seems like in most cases `touches` is empty for `touchend` events.\n          findMatchingTouch(event.changedTouches, this._touchId)) {\n            event.preventDefault();\n\n            this._removeGlobalEvents();\n\n            this._isSliding = null;\n            this._touchId = undefined;\n\n            if (this._valueOnSlideStart != this.value && !this.disabled) {\n              this._emitChangeEvent();\n            }\n\n            this._valueOnSlideStart = this._lastPointerEvent = null;\n          }\n        }\n      };\n      /** Called when the window has lost focus. */\n\n\n      this._windowBlur = () => {\n        // If the window is blurred while dragging we need to stop dragging because the\n        // browser won't dispatch the `mouseup` and `touchend` events anymore.\n        if (this._lastPointerEvent) {\n          this._pointerUp(this._lastPointerEvent);\n        }\n      };\n\n      this._document = _document;\n      this.tabIndex = parseInt(tabIndex) || 0;\n\n      _ngZone.runOutsideAngular(() => {\n        const element = elementRef.nativeElement;\n        element.addEventListener('mousedown', this._pointerDown, activeEventOptions);\n        element.addEventListener('touchstart', this._pointerDown, activeEventOptions);\n      });\n    }\n    /** Whether the slider is inverted. */\n\n\n    get invert() {\n      return this._invert;\n    }\n\n    set invert(value) {\n      this._invert = coerceBooleanProperty(value);\n    }\n    /** The maximum value that the slider can have. */\n\n\n    get max() {\n      return this._max;\n    }\n\n    set max(v) {\n      this._max = coerceNumberProperty(v, this._max);\n      this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** The minimum value that the slider can have. */\n\n\n    get min() {\n      return this._min;\n    }\n\n    set min(v) {\n      this._min = coerceNumberProperty(v, this._min);\n      this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** The values at which the thumb will snap. */\n\n\n    get step() {\n      return this._step;\n    }\n\n    set step(v) {\n      this._step = coerceNumberProperty(v, this._step);\n\n      if (this._step % 1 !== 0) {\n        this._roundToDecimal = this._step.toString().split('.').pop().length;\n      } // Since this could modify the label, we need to notify the change detection.\n\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Whether or not to show the thumb label. */\n\n\n    get thumbLabel() {\n      return this._thumbLabel;\n    }\n\n    set thumbLabel(value) {\n      this._thumbLabel = coerceBooleanProperty(value);\n    }\n    /**\n     * How often to show ticks. Relative to the step so that a tick always appears on a step.\n     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n     */\n\n\n    get tickInterval() {\n      return this._tickInterval;\n    }\n\n    set tickInterval(value) {\n      if (value === 'auto') {\n        this._tickInterval = 'auto';\n      } else if (typeof value === 'number' || typeof value === 'string') {\n        this._tickInterval = coerceNumberProperty(value, this._tickInterval);\n      } else {\n        this._tickInterval = 0;\n      }\n    }\n    /** Value of the slider. */\n\n\n    get value() {\n      // If the value needs to be read and it is still uninitialized, initialize it to the min.\n      if (this._value === null) {\n        this.value = this._min;\n      }\n\n      return this._value;\n    }\n\n    set value(v) {\n      if (v !== this._value) {\n        let value = coerceNumberProperty(v, 0); // While incrementing by a decimal we can end up with values like 33.300000000000004.\n        // Truncate it to ensure that it matches the label and to make it easier to work with.\n\n        if (this._roundToDecimal && value !== this.min && value !== this.max) {\n          value = parseFloat(value.toFixed(this._roundToDecimal));\n        }\n\n        this._value = value;\n        this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Whether the slider is vertical. */\n\n\n    get vertical() {\n      return this._vertical;\n    }\n\n    set vertical(value) {\n      this._vertical = coerceBooleanProperty(value);\n    }\n    /** The value to be used for display purposes. */\n\n\n    get displayValue() {\n      if (this.displayWith) {\n        // Value is never null but since setters and getters cannot have\n        // different types, the value getter is also typed to return null.\n        return this.displayWith(this.value);\n      } // Note that this could be improved further by rounding something like 0.999 to 1 or\n      // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n      // every change detection cycle.\n\n\n      if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n        return this.value.toFixed(this._roundToDecimal);\n      }\n\n      return this.value || 0;\n    }\n    /** set focus to the host element */\n\n\n    focus(options) {\n      this._focusHostElement(options);\n    }\n    /** blur the host element */\n\n\n    blur() {\n      this._blurHostElement();\n    }\n    /** The percentage of the slider that coincides with the value. */\n\n\n    get percent() {\n      return this._clamp(this._percent);\n    }\n    /**\n     * Whether the axis of the slider is inverted.\n     * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n     */\n\n\n    _shouldInvertAxis() {\n      // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n      // top. However from a y-axis standpoint this is inverted.\n      return this.vertical ? !this.invert : this.invert;\n    }\n    /** Whether the slider is at its minimum value. */\n\n\n    _isMinValue() {\n      return this.percent === 0;\n    }\n    /**\n     * The amount of space to leave between the slider thumb and the track fill & track background\n     * elements.\n     */\n\n\n    _getThumbGap() {\n      if (this.disabled) {\n        return DISABLED_THUMB_GAP;\n      }\n\n      if (this._isMinValue() && !this.thumbLabel) {\n        return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n      }\n\n      return 0;\n    }\n    /** CSS styles for the track background element. */\n\n\n    _getTrackBackgroundStyles() {\n      const axis = this.vertical ? 'Y' : 'X';\n      const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n      const sign = this._shouldInvertMouseCoords() ? '-' : '';\n      return {\n        // scale3d avoids some rendering issues in Chrome. See #12071.\n        transform: `translate${axis}(${sign}${this._getThumbGap()}px) scale3d(${scale})`\n      };\n    }\n    /** CSS styles for the track fill element. */\n\n\n    _getTrackFillStyles() {\n      const percent = this.percent;\n      const axis = this.vertical ? 'Y' : 'X';\n      const scale = this.vertical ? `1, ${percent}, 1` : `${percent}, 1, 1`;\n      const sign = this._shouldInvertMouseCoords() ? '' : '-';\n      return {\n        // scale3d avoids some rendering issues in Chrome. See #12071.\n        transform: `translate${axis}(${sign}${this._getThumbGap()}px) scale3d(${scale})`,\n        // iOS Safari has a bug where it won't re-render elements which start of as `scale(0)` until\n        // something forces a style recalculation on it. Since we'll end up with `scale(0)` when\n        // the value of the slider is 0, we can easily get into this situation. We force a\n        // recalculation by changing the element's `display` when it goes from 0 to any other value.\n        display: percent === 0 ? 'none' : ''\n      };\n    }\n    /** CSS styles for the ticks container element. */\n\n\n    _getTicksContainerStyles() {\n      let axis = this.vertical ? 'Y' : 'X'; // For a horizontal slider in RTL languages we push the ticks container off the left edge\n      // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n\n      let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n      let offset = this._tickIntervalPercent / 2 * 100;\n      return {\n        'transform': `translate${axis}(${sign}${offset}%)`\n      };\n    }\n    /** CSS styles for the ticks element. */\n\n\n    _getTicksStyles() {\n      let tickSize = this._tickIntervalPercent * 100;\n      let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n      let axis = this.vertical ? 'Y' : 'X'; // Depending on the direction we pushed the ticks container, push the ticks the opposite\n      // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n      // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n\n      let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n      let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n      let styles = {\n        'backgroundSize': backgroundSize,\n        // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n        'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n      };\n\n      if (this._isMinValue() && this._getThumbGap()) {\n        const shouldInvertAxis = this._shouldInvertAxis();\n\n        let side;\n\n        if (this.vertical) {\n          side = shouldInvertAxis ? 'Bottom' : 'Top';\n        } else {\n          side = shouldInvertAxis ? 'Right' : 'Left';\n        }\n\n        styles[`padding${side}`] = `${this._getThumbGap()}px`;\n      }\n\n      return styles;\n    }\n\n    _getThumbContainerStyles() {\n      const shouldInvertAxis = this._shouldInvertAxis();\n\n      let axis = this.vertical ? 'Y' : 'X'; // For a horizontal slider in RTL languages we push the thumb container off the left edge\n      // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n\n      let invertOffset = this._getDirection() == 'rtl' && !this.vertical ? !shouldInvertAxis : shouldInvertAxis;\n      let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n      return {\n        'transform': `translate${axis}(-${offset}%)`\n      };\n    }\n    /**\n     * Whether mouse events should be converted to a slider position by calculating their distance\n     * from the right or bottom edge of the slider as opposed to the top or left.\n     */\n\n\n    _shouldInvertMouseCoords() {\n      const shouldInvertAxis = this._shouldInvertAxis();\n\n      return this._getDirection() == 'rtl' && !this.vertical ? !shouldInvertAxis : shouldInvertAxis;\n    }\n    /** The language direction for this slider element. */\n\n\n    _getDirection() {\n      return this._dir && this._dir.value == 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    ngAfterViewInit() {\n      this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\n        this._isActive = !!origin && origin !== 'keyboard';\n\n        this._changeDetectorRef.detectChanges();\n      });\n\n      if (this._dir) {\n        this._dirChangeSubscription = this._dir.change.subscribe(() => {\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    }\n\n    ngOnDestroy() {\n      const element = this._elementRef.nativeElement;\n      element.removeEventListener('mousedown', this._pointerDown, activeEventOptions);\n      element.removeEventListener('touchstart', this._pointerDown, activeEventOptions);\n      this._lastPointerEvent = null;\n\n      this._removeGlobalEvents();\n\n      this._focusMonitor.stopMonitoring(this._elementRef);\n\n      this._dirChangeSubscription.unsubscribe();\n    }\n\n    _onMouseenter() {\n      if (this.disabled) {\n        return;\n      } // We save the dimensions of the slider here so we can use them to update the spacing of the\n      // ticks and determine where on the slider click and slide events happen.\n\n\n      this._sliderDimensions = this._getSliderDimensions();\n\n      this._updateTickIntervalPercent();\n    }\n\n    _onFocus() {\n      // We save the dimensions of the slider here so we can use them to update the spacing of the\n      // ticks and determine where on the slider click and slide events happen.\n      this._sliderDimensions = this._getSliderDimensions();\n\n      this._updateTickIntervalPercent();\n    }\n\n    _onBlur() {\n      this.onTouched();\n    }\n\n    _onKeydown(event) {\n      if (this.disabled || hasModifierKey(event) || this._isSliding && this._isSliding !== 'keyboard') {\n        return;\n      }\n\n      const oldValue = this.value;\n\n      switch (event.keyCode) {\n        case PAGE_UP:\n          this._increment(10);\n\n          break;\n\n        case PAGE_DOWN:\n          this._increment(-10);\n\n          break;\n\n        case END:\n          this.value = this.max;\n          break;\n\n        case HOME:\n          this.value = this.min;\n          break;\n\n        case LEFT_ARROW:\n          // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n          // inverted slider the thumb moves in that direction. However for a blind user, nothing\n          // about the slider indicates that it is inverted. They will expect left to be decrement,\n          // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n          // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n          // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n          // sighted users, therefore we do not swap the meaning.\n          this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n\n          break;\n\n        case UP_ARROW:\n          this._increment(1);\n\n          break;\n\n        case RIGHT_ARROW:\n          // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n          this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n\n          break;\n\n        case DOWN_ARROW:\n          this._increment(-1);\n\n          break;\n\n        default:\n          // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n          // it.\n          return;\n      }\n\n      if (oldValue != this.value) {\n        this._emitInputEvent();\n\n        this._emitChangeEvent();\n      }\n\n      this._isSliding = 'keyboard';\n      event.preventDefault();\n    }\n\n    _onKeyup() {\n      if (this._isSliding === 'keyboard') {\n        this._isSliding = null;\n      }\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n\n\n    _getWindow() {\n      return this._document.defaultView || window;\n    }\n    /**\n     * Binds our global move and end events. They're bound at the document level and only while\n     * dragging so that the user doesn't have to keep their pointer exactly over the slider\n     * as they're swiping across the screen.\n     */\n\n\n    _bindGlobalEvents(triggerEvent) {\n      // Note that we bind the events to the `document`, because it allows us to capture\n      // drag cancel events where the user's pointer is outside the browser window.\n      const document = this._document;\n      const isTouch = isTouchEvent(triggerEvent);\n      const moveEventName = isTouch ? 'touchmove' : 'mousemove';\n      const endEventName = isTouch ? 'touchend' : 'mouseup';\n      document.addEventListener(moveEventName, this._pointerMove, activeEventOptions);\n      document.addEventListener(endEventName, this._pointerUp, activeEventOptions);\n\n      if (isTouch) {\n        document.addEventListener('touchcancel', this._pointerUp, activeEventOptions);\n      }\n\n      const window = this._getWindow();\n\n      if (typeof window !== 'undefined' && window) {\n        window.addEventListener('blur', this._windowBlur);\n      }\n    }\n    /** Removes any global event listeners that we may have added. */\n\n\n    _removeGlobalEvents() {\n      const document = this._document;\n      document.removeEventListener('mousemove', this._pointerMove, activeEventOptions);\n      document.removeEventListener('mouseup', this._pointerUp, activeEventOptions);\n      document.removeEventListener('touchmove', this._pointerMove, activeEventOptions);\n      document.removeEventListener('touchend', this._pointerUp, activeEventOptions);\n      document.removeEventListener('touchcancel', this._pointerUp, activeEventOptions);\n\n      const window = this._getWindow();\n\n      if (typeof window !== 'undefined' && window) {\n        window.removeEventListener('blur', this._windowBlur);\n      }\n    }\n    /** Increments the slider by the given number of steps (negative number decrements). */\n\n\n    _increment(numSteps) {\n      // Pre-clamp the current value since it's allowed to be\n      // out of bounds when assigned programmatically.\n      const clampedValue = this._clamp(this.value || 0, this.min, this.max);\n\n      this.value = this._clamp(clampedValue + this.step * numSteps, this.min, this.max);\n    }\n    /** Calculate the new value from the new physical location. The value will always be snapped. */\n\n\n    _updateValueFromPosition(pos) {\n      if (!this._sliderDimensions) {\n        return;\n      }\n\n      let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n      let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let posComponent = this.vertical ? pos.y : pos.x; // The exact value is calculated from the event and used to find the closest snap value.\n\n      let percent = this._clamp((posComponent - offset) / size);\n\n      if (this._shouldInvertMouseCoords()) {\n        percent = 1 - percent;\n      } // Since the steps may not divide cleanly into the max value, if the user\n      // slid to 0 or 100 percent, we jump to the min/max value. This approach\n      // is slightly more intuitive than using `Math.ceil` below, because it\n      // follows the user's pointer closer.\n\n\n      if (percent === 0) {\n        this.value = this.min;\n      } else if (percent === 1) {\n        this.value = this.max;\n      } else {\n        const exactValue = this._calculateValue(percent); // This calculation finds the closest step by finding the closest\n        // whole number divisible by the step relative to the min.\n\n\n        const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min; // The value needs to snap to the min and max.\n\n        this.value = this._clamp(closestValue, this.min, this.max);\n      }\n    }\n    /** Emits a change event if the current value is different from the last emitted value. */\n\n\n    _emitChangeEvent() {\n      this._controlValueAccessorChangeFn(this.value);\n\n      this.valueChange.emit(this.value);\n      this.change.emit(this._createChangeEvent());\n    }\n    /** Emits an input event when the current value is different from the last emitted value. */\n\n\n    _emitInputEvent() {\n      this.input.emit(this._createChangeEvent());\n    }\n    /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n\n\n    _updateTickIntervalPercent() {\n      if (!this.tickInterval || !this._sliderDimensions) {\n        return;\n      }\n\n      let tickIntervalPercent;\n\n      if (this.tickInterval == 'auto') {\n        let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n        let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n        let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n        let pixelsPerTick = stepsPerTick * this.step;\n        tickIntervalPercent = pixelsPerTick / trackSize;\n      } else {\n        tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n      }\n\n      this._tickIntervalPercent = isSafeNumber(tickIntervalPercent) ? tickIntervalPercent : 0;\n    }\n    /** Creates a slider change object from the specified value. */\n\n\n    _createChangeEvent(value = this.value) {\n      let event = new MatSliderChange();\n      event.source = this;\n      event.value = value;\n      return event;\n    }\n    /** Calculates the percentage of the slider that a value is. */\n\n\n    _calculatePercentage(value) {\n      const percentage = ((value || 0) - this.min) / (this.max - this.min);\n      return isSafeNumber(percentage) ? percentage : 0;\n    }\n    /** Calculates the value a percentage of the slider corresponds to. */\n\n\n    _calculateValue(percentage) {\n      return this.min + percentage * (this.max - this.min);\n    }\n    /** Return a number between two numbers. */\n\n\n    _clamp(value, min = 0, max = 1) {\n      return Math.max(min, Math.min(value, max));\n    }\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     */\n\n\n    _getSliderDimensions() {\n      return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n    }\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     */\n\n\n    _focusHostElement(options) {\n      this._elementRef.nativeElement.focus(options);\n    }\n    /** Blurs the native element. */\n\n\n    _blurHostElement() {\n      this._elementRef.nativeElement.blur();\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n\n\n    writeValue(value) {\n      this.value = value;\n    }\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n\n\n    registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param isDisabled\n     */\n\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n\n  }\n\n  MatSlider.ɵfac = function MatSlider_Factory(t) {\n    return new (t || MatSlider)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.Directionality, 8), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatSlider.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatSlider,\n    selectors: [[\"mat-slider\"]],\n    viewQuery: function MatSlider_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._sliderWrapper = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"slider\", 1, \"mat-slider\", \"mat-focus-indicator\"],\n    hostVars: 29,\n    hostBindings: function MatSlider_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"focus\", function MatSlider_focus_HostBindingHandler() {\n          return ctx._onFocus();\n        })(\"blur\", function MatSlider_blur_HostBindingHandler() {\n          return ctx._onBlur();\n        })(\"keydown\", function MatSlider_keydown_HostBindingHandler($event) {\n          return ctx._onKeydown($event);\n        })(\"keyup\", function MatSlider_keyup_HostBindingHandler() {\n          return ctx._onKeyup();\n        })(\"mouseenter\", function MatSlider_mouseenter_HostBindingHandler() {\n          return ctx._onMouseenter();\n        })(\"selectstart\", function MatSlider_selectstart_HostBindingHandler($event) {\n          return $event.preventDefault();\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"tabIndex\", ctx.tabIndex);\n        i0.ɵɵattribute(\"aria-disabled\", ctx.disabled)(\"aria-valuemax\", ctx.max)(\"aria-valuemin\", ctx.min)(\"aria-valuenow\", ctx.value)(\"aria-valuetext\", ctx.valueText == null ? ctx.displayValue : ctx.valueText)(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n        i0.ɵɵclassProp(\"mat-slider-disabled\", ctx.disabled)(\"mat-slider-has-ticks\", ctx.tickInterval)(\"mat-slider-horizontal\", !ctx.vertical)(\"mat-slider-axis-inverted\", ctx._shouldInvertAxis())(\"mat-slider-invert-mouse-coords\", ctx._shouldInvertMouseCoords())(\"mat-slider-sliding\", ctx._isSliding)(\"mat-slider-thumb-label-showing\", ctx.thumbLabel)(\"mat-slider-vertical\", ctx.vertical)(\"mat-slider-min-value\", ctx._isMinValue())(\"mat-slider-hide-last-tick\", ctx.disabled || ctx._isMinValue() && ctx._getThumbGap() && ctx._shouldInvertAxis())(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      color: \"color\",\n      tabIndex: \"tabIndex\",\n      invert: \"invert\",\n      max: \"max\",\n      min: \"min\",\n      step: \"step\",\n      thumbLabel: \"thumbLabel\",\n      tickInterval: \"tickInterval\",\n      value: \"value\",\n      displayWith: \"displayWith\",\n      valueText: \"valueText\",\n      vertical: \"vertical\"\n    },\n    outputs: {\n      change: \"change\",\n      input: \"input\",\n      valueChange: \"valueChange\"\n    },\n    exportAs: [\"matSlider\"],\n    features: [i0.ɵɵProvidersFeature([MAT_SLIDER_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature],\n    decls: 13,\n    vars: 6,\n    consts: [[1, \"mat-slider-wrapper\"], [\"sliderWrapper\", \"\"], [1, \"mat-slider-track-wrapper\"], [1, \"mat-slider-track-background\", 3, \"ngStyle\"], [1, \"mat-slider-track-fill\", 3, \"ngStyle\"], [1, \"mat-slider-ticks-container\", 3, \"ngStyle\"], [1, \"mat-slider-ticks\", 3, \"ngStyle\"], [1, \"mat-slider-thumb-container\", 3, \"ngStyle\"], [1, \"mat-slider-focus-ring\"], [1, \"mat-slider-thumb\"], [1, \"mat-slider-thumb-label\"], [1, \"mat-slider-thumb-label-text\"]],\n    template: function MatSlider_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"div\", 3)(4, \"div\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 5);\n        i0.ɵɵelement(6, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 7);\n        i0.ɵɵelement(8, \"div\", 8)(9, \"div\", 9);\n        i0.ɵɵelementStart(10, \"div\", 10)(11, \"span\", 11);\n        i0.ɵɵtext(12);\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngStyle\", ctx._getTrackBackgroundStyles());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngStyle\", ctx._getTrackFillStyles());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngStyle\", ctx._getTicksContainerStyles());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngStyle\", ctx._getTicksStyles());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngStyle\", ctx._getThumbContainerStyles());\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(ctx.displayValue);\n      }\n    },\n    directives: [i3.NgStyle],\n    styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:grabbing}.mat-slider-wrapper{-webkit-print-color-adjust:exact;color-adjust:exact;position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{-webkit-background-clip:content-box;background-clip:content-box;background-repeat:repeat;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatSlider;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Checks if number is safe for calculation */\n\n\nfunction isSafeNumber(value) {\n  return !isNaN(value) && isFinite(value);\n}\n/** Returns whether an event is a touch event. */\n\n\nfunction isTouchEvent(event) {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n/** Gets the coordinates of a touch or mouse event relative to the viewport. */\n\n\nfunction getPointerPositionOnPage(event, id) {\n  let point;\n\n  if (isTouchEvent(event)) {\n    // The `identifier` could be undefined if the browser doesn't support `TouchEvent.identifier`.\n    // If that's the case, attribute the first touch to all active sliders. This should still cover\n    // the most common case while only breaking multi-touch.\n    if (typeof id === 'number') {\n      point = findMatchingTouch(event.touches, id) || findMatchingTouch(event.changedTouches, id);\n    } else {\n      // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n      point = event.touches[0] || event.changedTouches[0];\n    }\n  } else {\n    point = event;\n  }\n\n  return point ? {\n    x: point.clientX,\n    y: point.clientY\n  } : undefined;\n}\n/** Finds a `Touch` with a specific ID in a `TouchList`. */\n\n\nfunction findMatchingTouch(touches, id) {\n  for (let i = 0; i < touches.length; i++) {\n    if (touches[i].identifier === id) {\n      return touches[i];\n    }\n  }\n\n  return undefined;\n}\n/** Gets the unique ID of a touch that matches a specific slider. */\n\n\nfunction getTouchIdForSlider(event, sliderHost) {\n  for (let i = 0; i < event.touches.length; i++) {\n    const target = event.touches[i].target;\n\n    if (sliderHost === target || sliderHost.contains(target)) {\n      return event.touches[i].identifier;\n    }\n  }\n\n  return undefined;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatSliderModule = /*#__PURE__*/(() => {\n  class MatSliderModule {}\n\n  MatSliderModule.ɵfac = function MatSliderModule_Factory(t) {\n    return new (t || MatSliderModule)();\n  };\n\n  MatSliderModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatSliderModule\n  });\n  MatSliderModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, MatCommonModule], MatCommonModule]\n  });\n  return MatSliderModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SLIDER_VALUE_ACCESSOR, MatSlider, MatSliderChange, MatSliderModule }; //# sourceMappingURL=slider.mjs.map","map":null,"metadata":{},"sourceType":"module"}