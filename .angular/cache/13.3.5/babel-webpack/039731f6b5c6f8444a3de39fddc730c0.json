{"ast":null,"code":"import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport * as moment from 'moment';\nimport { tap } from 'rxjs/operators';\nimport { LogService } from './log.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./log.service\";\nexport let LogHttpInterceptor = /*#__PURE__*/(() => {\n  class LogHttpInterceptor {\n    constructor(logService) {\n      this.logService = logService;\n    }\n\n    intercept(oldReq, next) {\n      const requestBeginTime = moment();\n      return next.handle(oldReq).pipe(tap(_ => {\n        this.logTime(requestBeginTime, oldReq.url, oldReq.method);\n      }));\n    }\n\n    logTime(startMoment, url, method) {\n      const requestDuration = moment().diff(startMoment, 'milliseconds');\n      this.logService.logHttpInfo(`HTTP ${method}`, requestDuration, url);\n    }\n\n  }\n\n  LogHttpInterceptor.ɵfac = function LogHttpInterceptor_Factory(t) {\n    return new (t || LogHttpInterceptor)(i0.ɵɵinject(i1.LogService));\n  };\n\n  LogHttpInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LogHttpInterceptor,\n    factory: LogHttpInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return LogHttpInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}