{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Inject, Input, ViewChild, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatProgressBar.\n\n/** @docs-private */\n\nconst _c0 = [\"primaryValueBar\"];\n\nconst _MatProgressBarBase = /*#__PURE__*/mixinColor(class {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}, 'primary');\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\n\n\nconst MAT_PROGRESS_BAR_LOCATION = /*#__PURE__*/new InjectionToken('mat-progress-bar-location', {\n  providedIn: 'root',\n  factory: MAT_PROGRESS_BAR_LOCATION_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_PROGRESS_BAR_LOCATION_FACTORY() {\n  const _document = inject(DOCUMENT);\n\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? _location.pathname + _location.search : ''\n  };\n}\n/** Injection token to be used to override the default options for `mat-progress-bar`. */\n\n\nconst MAT_PROGRESS_BAR_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('MAT_PROGRESS_BAR_DEFAULT_OPTIONS');\n/** Counter used to generate unique IDs for progress bars. */\n\nlet progressbarId = 0;\n/**\n * `<mat-progress-bar>` component.\n */\n\nlet MatProgressBar = /*#__PURE__*/(() => {\n  class MatProgressBar extends _MatProgressBarBase {\n    constructor(elementRef, _ngZone, _animationMode,\n    /**\n     * @deprecated `location` parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    location, defaults,\n    /**\n     * @deprecated `_changeDetectorRef` parameter to be made required.\n     * @breaking-change 11.0.0\n     */\n    _changeDetectorRef) {\n      super(elementRef);\n      this._ngZone = _ngZone;\n      this._animationMode = _animationMode;\n      this._changeDetectorRef = _changeDetectorRef;\n      /** Flag that indicates whether NoopAnimations mode is set to true. */\n\n      this._isNoopAnimation = false;\n      this._value = 0;\n      this._bufferValue = 0;\n      /**\n       * Event emitted when animation of the primary progress bar completes. This event will not\n       * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n       * animations (indeterminate and query).\n       */\n\n      this.animationEnd = new EventEmitter();\n      /** Reference to animation end subscription to be unsubscribed on destroy. */\n\n      this._animationEndSubscription = Subscription.EMPTY;\n      /**\n       * Mode of the progress bar.\n       *\n       * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n       * 'determinate'.\n       * Mirrored to mode attribute.\n       */\n\n      this.mode = 'determinate';\n      /** ID of the progress bar. */\n\n      this.progressbarId = `mat-progress-bar-${progressbarId++}`; // We need to prefix the SVG reference with the current path, otherwise they won't work\n      // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n      // because named route URLs can contain parentheses (see #12338). Also we don't use `Location`\n      // since we can't tell the difference between whether the consumer is using the hash location\n      // strategy or not, because `Location` normalizes both `/#/foo/bar` and `/foo/bar` to\n      // the same thing.\n\n      const path = location ? location.getPathname().split('#')[0] : '';\n      this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n      this._isNoopAnimation = _animationMode === 'NoopAnimations';\n\n      if (defaults) {\n        if (defaults.color) {\n          this.color = this.defaultColor = defaults.color;\n        }\n\n        this.mode = defaults.mode || this.mode;\n      }\n    }\n    /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n\n\n    get value() {\n      return this._value;\n    }\n\n    set value(v) {\n      var _a;\n\n      this._value = clamp(coerceNumberProperty(v) || 0); // @breaking-change 11.0.0 Remove null check for _changeDetectorRef.\n\n      (_a = this._changeDetectorRef) === null || _a === void 0 ? void 0 : _a.markForCheck();\n    }\n    /** Buffer value of the progress bar. Defaults to zero. */\n\n\n    get bufferValue() {\n      return this._bufferValue;\n    }\n\n    set bufferValue(v) {\n      var _a;\n\n      this._bufferValue = clamp(v || 0); // @breaking-change 11.0.0 Remove null check for _changeDetectorRef.\n\n      (_a = this._changeDetectorRef) === null || _a === void 0 ? void 0 : _a.markForCheck();\n    }\n    /** Gets the current transform value for the progress bar's primary indicator. */\n\n\n    _primaryTransform() {\n      // We use a 3d transform to work around some rendering issues in iOS Safari. See #19328.\n      const scale = this.value / 100;\n      return {\n        transform: `scale3d(${scale}, 1, 1)`\n      };\n    }\n    /**\n     * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n     */\n\n\n    _bufferTransform() {\n      if (this.mode === 'buffer') {\n        // We use a 3d transform to work around some rendering issues in iOS Safari. See #19328.\n        const scale = this.bufferValue / 100;\n        return {\n          transform: `scale3d(${scale}, 1, 1)`\n        };\n      }\n\n      return null;\n    }\n\n    ngAfterViewInit() {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular(() => {\n        const element = this._primaryValueBar.nativeElement;\n        this._animationEndSubscription = fromEvent(element, 'transitionend').pipe(filter(e => e.target === element)).subscribe(() => {\n          if (this.animationEnd.observers.length === 0) {\n            return;\n          }\n\n          if (this.mode === 'determinate' || this.mode === 'buffer') {\n            this._ngZone.run(() => this.animationEnd.next({\n              value: this.value\n            }));\n          }\n        });\n      });\n    }\n\n    ngOnDestroy() {\n      this._animationEndSubscription.unsubscribe();\n    }\n\n  }\n\n  MatProgressBar.ɵfac = function MatProgressBar_Factory(t) {\n    return new (t || MatProgressBar)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), i0.ɵɵdirectiveInject(MAT_PROGRESS_BAR_LOCATION, 8), i0.ɵɵdirectiveInject(MAT_PROGRESS_BAR_DEFAULT_OPTIONS, 8), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  MatProgressBar.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatProgressBar,\n    selectors: [[\"mat-progress-bar\"]],\n    viewQuery: function MatProgressBar_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._primaryValueBar = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", \"tabindex\", \"-1\", 1, \"mat-progress-bar\"],\n    hostVars: 4,\n    hostBindings: function MatProgressBar_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-valuenow\", ctx.mode === \"indeterminate\" || ctx.mode === \"query\" ? null : ctx.value)(\"mode\", ctx.mode);\n        i0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._isNoopAnimation);\n      }\n    },\n    inputs: {\n      color: \"color\",\n      value: \"value\",\n      bufferValue: \"bufferValue\",\n      mode: \"mode\"\n    },\n    outputs: {\n      animationEnd: \"animationEnd\"\n    },\n    exportAs: [\"matProgressBar\"],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 10,\n    vars: 4,\n    consts: [[\"aria-hidden\", \"true\"], [\"width\", \"100%\", \"height\", \"4\", \"focusable\", \"false\", 1, \"mat-progress-bar-background\", \"mat-progress-bar-element\"], [\"x\", \"4\", \"y\", \"0\", \"width\", \"8\", \"height\", \"4\", \"patternUnits\", \"userSpaceOnUse\", 3, \"id\"], [\"cx\", \"2\", \"cy\", \"2\", \"r\", \"2\"], [\"width\", \"100%\", \"height\", \"100%\"], [1, \"mat-progress-bar-buffer\", \"mat-progress-bar-element\", 3, \"ngStyle\"], [1, \"mat-progress-bar-primary\", \"mat-progress-bar-fill\", \"mat-progress-bar-element\", 3, \"ngStyle\"], [\"primaryValueBar\", \"\"], [1, \"mat-progress-bar-secondary\", \"mat-progress-bar-fill\", \"mat-progress-bar-element\"]],\n    template: function MatProgressBar_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(1, \"svg\", 1)(2, \"defs\")(3, \"pattern\", 2);\n        i0.ɵɵelement(4, \"circle\", 3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(5, \"rect\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵnamespaceHTML();\n        i0.ɵɵelement(6, \"div\", 5)(7, \"div\", 6, 7)(9, \"div\", 8);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"id\", ctx.progressbarId);\n        i0.ɵɵadvance(2);\n        i0.ɵɵattribute(\"fill\", ctx._rectangleFillValue);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngStyle\", ctx._bufferTransform());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngStyle\", ctx._primaryTransform());\n      }\n    },\n    directives: [i1.NgStyle],\n    styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-background{display:none}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:\\\"\\\";display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2000ms infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2000ms infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background{animation:none;transition-duration:1ms}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(83.67142%)}100%{transform:translateX(200.611057%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(84.386165%)}100%{transform:translateX(160.277782%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatProgressBar;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Clamps a value to be between two numbers, by default 0 and 100. */\n\n\nfunction clamp(v, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatProgressBarModule = /*#__PURE__*/(() => {\n  class MatProgressBarModule {}\n\n  MatProgressBarModule.ɵfac = function MatProgressBarModule_Factory(t) {\n    return new (t || MatProgressBarModule)();\n  };\n\n  MatProgressBarModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatProgressBarModule\n  });\n  MatProgressBarModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, MatCommonModule], MatCommonModule]\n  });\n  return MatProgressBarModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_PROGRESS_BAR_DEFAULT_OPTIONS, MAT_PROGRESS_BAR_LOCATION, MAT_PROGRESS_BAR_LOCATION_FACTORY, MatProgressBar, MatProgressBarModule }; //# sourceMappingURL=progress-bar.mjs.map","map":null,"metadata":{},"sourceType":"module"}