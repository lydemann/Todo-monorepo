{"ast":null,"code":"/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nimport { Injectable } from '@angular/core';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { ROUTER_NAVIGATION } from '@ngrx/router-store';\nimport { Store } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, concatMap, filter, groupBy, map, mergeMap, switchMap, withLatestFrom } from 'rxjs/operators';\n/**\n * See {\\@link DataPersistence.pessimisticUpdate} for more information.\n * @record\n * @template T, A\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@ngrx/store';\nimport * as ɵngcc2 from '@ngrx/effects';\nexport function PessimisticUpdateOpts() {}\n\nif (false) {\n  /**\n   * @param {?} a\n   * @param {?=} state\n   * @return {?}\n   */\n  PessimisticUpdateOpts.prototype.run = function (a, state) {};\n  /**\n   * @param {?} a\n   * @param {?} e\n   * @return {?}\n   */\n\n\n  PessimisticUpdateOpts.prototype.onError = function (a, e) {};\n}\n/**\n * See {\\@link DataPersistence.pessimisticUpdate} for more information.\n * @record\n * @template T, A\n */\n\n\nexport function OptimisticUpdateOpts() {}\n\nif (false) {\n  /**\n   * @param {?} a\n   * @param {?=} state\n   * @return {?}\n   */\n  OptimisticUpdateOpts.prototype.run = function (a, state) {};\n  /**\n   * @param {?} a\n   * @param {?} e\n   * @return {?}\n   */\n\n\n  OptimisticUpdateOpts.prototype.undoAction = function (a, e) {};\n}\n/**\n * See {\\@link DataPersistence.fetch} for more information.\n * @record\n * @template T, A\n */\n\n\nexport function FetchOpts() {}\n\nif (false) {\n  /**\n   * @param {?} a\n   * @param {?=} state\n   * @return {?}\n   */\n  FetchOpts.prototype.id = function (a, state) {};\n  /**\n   * @param {?} a\n   * @param {?=} state\n   * @return {?}\n   */\n\n\n  FetchOpts.prototype.run = function (a, state) {};\n  /**\n   * @param {?} a\n   * @param {?} e\n   * @return {?}\n   */\n\n\n  FetchOpts.prototype.onError = function (a, e) {};\n}\n/**\n * See {\\@link DataPersistence.navigation} for more information.\n * @record\n * @template T\n */\n\n\nexport function HandleNavigationOpts() {}\n\nif (false) {\n  /**\n   * @param {?} a\n   * @param {?=} state\n   * @return {?}\n   */\n  HandleNavigationOpts.prototype.run = function (a, state) {};\n  /**\n   * @param {?} a\n   * @param {?} e\n   * @return {?}\n   */\n\n\n  HandleNavigationOpts.prototype.onError = function (a, e) {};\n}\n/**\n * @template T, A\n * @param {?} opts\n * @return {?}\n */\n\n\nexport function pessimisticUpdate(opts) {\n  return source => {\n    return source.pipe(mapActionAndState(), concatMap(runWithErrorHandling(opts.run, opts.onError)));\n  };\n}\n/**\n * @template T, A\n * @param {?} opts\n * @return {?}\n */\n\nexport function optimisticUpdate(opts) {\n  return source => {\n    return source.pipe(mapActionAndState(), concatMap(runWithErrorHandling(opts.run, opts.undoAction)));\n  };\n}\n/**\n * @template T, A\n * @param {?} opts\n * @return {?}\n */\n\nexport function fetch(opts) {\n  return source => {\n    if (opts.id) {\n      /** @type {?} */\n      const groupedFetches = source.pipe(mapActionAndState(), groupBy(([action, store]) => {\n        return opts.id(action, store);\n      }));\n      return groupedFetches.pipe(mergeMap(pairs => pairs.pipe(switchMap(runWithErrorHandling(opts.run, opts.onError)))));\n    }\n\n    return source.pipe(mapActionAndState(), concatMap(runWithErrorHandling(opts.run, opts.onError)));\n  };\n}\n/**\n * @template T, A\n * @param {?} component\n * @param {?} opts\n * @return {?}\n */\n\nexport function navigation(component, opts) {\n  return source => {\n    /** @type {?} */\n    const nav = source.pipe(mapActionAndState(), filter(([action, state]) => isStateSnapshot(action)), map(([action, state]) => {\n      if (!isStateSnapshot(action)) {\n        // Because of the above filter we'll never get here,\n        // but this properly type narrows `action`\n        return;\n      }\n\n      return (\n        /** @type {?} */\n        [findSnapshot(component, action.payload.routerState.root), state]\n      );\n    }), filter(([snapshot, state]) => !!snapshot));\n    return nav.pipe(switchMap(runWithErrorHandling(opts.run, opts.onError)));\n  };\n}\n/**\n * @param {?} action\n * @return {?}\n */\n\nfunction isStateSnapshot(action) {\n  return action.type === ROUTER_NAVIGATION;\n}\n/**\n * @template T, A, R\n * @param {?} run\n * @param {?} onError\n * @return {?}\n */\n\n\nfunction runWithErrorHandling(run, onError) {\n  return ([action, state]) => {\n    try {\n      /** @type {?} */\n      const r = wrapIntoObservable(run(action, state));\n      return r.pipe(catchError(e => wrapIntoObservable(onError(action, e))));\n    } catch (e) {\n      return wrapIntoObservable(onError(action, e));\n    }\n  };\n}\n/**\n * \\@whatItDoes maps Observable<Action | [Action, State]> to\n * Observable<[Action, State]>\n * @template T, A\n * @return {?}\n */\n\n\nfunction mapActionAndState() {\n  return source => {\n    return source.pipe(map(value => {\n      const [action, store] = normalizeActionAndState(value);\n      return (\n        /** @type {?} */\n        [action, store]\n      );\n    }));\n  };\n}\n/**\n * \\@whatItDoes Normalizes either a bare action or an array of action and state\n * into an array of action and state (or undefined)\n * @template T, A\n * @param {?} args\n * @return {?}\n */\n\n\nfunction normalizeActionAndState(args) {\n  /** @type {?} */\n  let action;\n  /** @type {?} */\n\n  let state;\n\n  if (args instanceof Array) {\n    [action, state] = args;\n  } else {\n    action = args;\n  }\n\n  return [action, state];\n}\n/**\n * \\@whatItDoes Provides convenience methods for implementing common operations of persisting data.\n * @template T\n */\n\n\nexport let DataPersistence = /*#__PURE__*/(() => {\n  class DataPersistence {\n    /**\n     * @param {?} store\n     * @param {?} actions\n     */\n    constructor(store, actions) {\n      this.store = store;\n      this.actions = actions;\n    }\n    /**\n     *\n     * \\@whatItDoes Handles pessimistic updates (updating the server first).\n     *\n     * Update the server implemented naively suffers from race conditions and poor error handling.\n     *\n     * `pessimisticUpdate` addresses these problems--it runs all fetches in order, which removes race conditions\n     * and forces the developer to handle errors.\n     *\n     * ## Example:\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class TodoEffects {\n     * \\@Effect() updateTodo = this.s.pessimisticUpdate<UpdateTodo>('UPDATE_TODO', {\n     *     // provides an action and the current state of the store\n     *     run(a, state) {\n     *       // update the backend first, and then dispatch an action that will\n     *       // update the client side\n     *       return this.backend(state.user, a.payload).map(updated => ({\n     *         type: 'TODO_UPDATED',\n     *         payload: updated\n     *       }));\n     *     },\n     *\n     *     onError(a, e: any) {\n     *       // we don't need to undo the changes on the client side.\n     *       // we can dispatch an error, or simply log the error here and return `null`\n     *       return null;\n     *     }\n     *   });\n     *\n     *   constructor(private s: DataPersistence<TodosState>, private backend: Backend) {}\n     * }\n     * ```\n     *\n     * Note that if you don't return a new action from the run callback, you must set the dispatch property\n     * of the effect to false, like this:\n     *\n     * ```\n     * class TodoEffects {\n     * \\@Effect({dispatch: false})\n     *   updateTodo; //...\n     * }\n     * ```\n     * @template A\n     * @param {?} actionType\n     * @param {?} opts\n     * @return {?}\n     */\n\n\n    pessimisticUpdate(actionType, opts) {\n      return this.actions.pipe(ofType(actionType), withLatestFrom(this.store), pessimisticUpdate(opts));\n    }\n    /**\n     *\n     * \\@whatItDoes Handles optimistic updates (updating the client first).\n     *\n     * `optimisticUpdate` addresses these problems--it runs all fetches in order, which removes race conditions\n     * and forces the developer to handle errors.\n     *\n     * `optimisticUpdate` is different from `pessimisticUpdate`. In case of a failure, when using `optimisticUpdate`,\n     * the developer already updated the state locally, so the developer must provide an undo action.\n     *\n     * The error handling must be done in the callback, or by means of the undo action.\n     *\n     * ## Example:\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class TodoEffects {\n     * \\@Effect() updateTodo = this.s.optimisticUpdate<UpdateTodo>('UPDATE_TODO', {\n     *     // provides an action and the current state of the store\n     *     run: (a, state) => {\n     *       return this.backend(state.user, a.payload);\n     *     },\n     *\n     *     undoAction: (a, e: any) => {\n     *       // dispatch an undo action to undo the changes in the client state\n     *       return ({\n     *         type: 'UNDO_UPDATE_TODO',\n     *         payload: a\n     *       });\n     *     }\n     *   });\n     *\n     *   constructor(private s: DataPersistence<TodosState>, private backend: Backend) {}\n     * }\n     * ```\n     *\n     * Note that if you don't return a new action from the run callback, you must set the dispatch property\n     * of the effect to false, like this:\n     *\n     * ```\n     * class TodoEffects {\n     * \\@Effect({dispatch: false})\n     *   updateTodo; //...\n     * }\n     * ```\n     * @template A\n     * @param {?} actionType\n     * @param {?} opts\n     * @return {?}\n     */\n\n\n    optimisticUpdate(actionType, opts) {\n      return this.actions.pipe(ofType(actionType), withLatestFrom(this.store), optimisticUpdate(opts));\n    }\n    /**\n     *\n     * \\@whatItDoes Handles data fetching.\n     *\n     * Data fetching implemented naively suffers from race conditions and poor error handling.\n     *\n     * `fetch` addresses these problems--it runs all fetches in order, which removes race conditions\n     * and forces the developer to handle errors.\n     *\n     * ## Example:\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class TodoEffects {\n     * \\@Effect() loadTodos = this.s.fetch<GetTodos>('GET_TODOS', {\n     *     // provides an action and the current state of the store\n     *     run: (a, state) => {\n     *       return this.backend(state.user, a.payload).map(r => ({\n     *         type: 'TODOS',\n     *         payload: r\n     *       });\n     *     },\n     *\n     *     onError: (a, e: any) => {\n     *       // dispatch an undo action to undo the changes in the client state\n     *     }\n     *   });\n     *\n     *   constructor(private s: DataPersistence<TodosState>, private backend: Backend) {}\n     * }\n     * ```\n     *\n     * This is correct, but because it set the concurrency to 1, it may not be performant.\n     *\n     * To fix that, you can provide the `id` function, like this:\n     *\n     * ```typescript / loadTodo = this.s.fetch<GetTodo>('GET_TODO', {\n     *     id: (a, state) => {\n     *       return a.payload.id;\n     *     }\n     *\n     *     // provides an action and the current state of the store\n     *     run: (a, state) => {\n     *       return this.backend(state.user, a.payload).map(r => ({\n     *         type: 'TODO',\n     *         payload: r\n     *       });\n     *     },\n     *\n     *     onError: (a, e: any) => {\n     *       // dispatch an undo action to undo the changes in the client state\n     *       return null;\n     *     }\n     *   });\n     *\n     *   constructor(private s: DataPersistence<TodosState>, private backend: Backend) {}\n     * }\n     * ```\n     *\n     * With this setup, the requests for Todo 1 will run concurrently with the requests for Todo 2.\n     *\n     * In addition, if DataPersistence notices that there are multiple requests for Todo 1 scheduled,\n     * it will only run the last one.\n     * @template A\n     * @param {?} actionType\n     * @param {?} opts\n     * @return {?}\n     */\n\n\n    fetch(actionType, opts) {\n      return this.actions.pipe(ofType(actionType), withLatestFrom(this.store), fetch(opts));\n    }\n    /**\n     * \\@whatItDoes Handles data fetching as part of router navigation.\n     *\n     * Data fetching implemented naively suffers from race conditions and poor error handling.\n     *\n     * `navigation` addresses these problems.\n     *\n     * It checks if an activated router state contains the passed in component type, and, if it does, runs the `run`\n     * callback. It provides the activated snapshot associated with the component and the current state. And it only runs\n     * the last request.\n     *\n     * ## Example:\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class TodoEffects {\n     * \\@Effect() loadTodo = this.s.navigation(TodoComponent, {\n     *     run: (a, state) => {\n     *       return this.backend.fetchTodo(a.params['id']).map(todo => ({\n     *         type: 'TODO_LOADED',\n     *         payload: todo\n     *       }));\n     *     },\n     *     onError: (a, e: any) => {\n     *       // we can log and error here and return null\n     *       // we can also navigate back\n     *       return null;\n     *     }\n     *   });\n     *   constructor(private s: DataPersistence<TodosState>, private backend: Backend) {}\n     * }\n     * ```\n     * @param {?} component\n     * @param {?} opts\n     * @return {?}\n     */\n\n\n    navigation(component, opts) {\n      return this.actions.pipe(withLatestFrom(this.store), navigation(component, opts));\n    }\n\n  }\n\n  DataPersistence.ɵfac = function DataPersistence_Factory(t) {\n    return new (t || DataPersistence)(ɵngcc0.ɵɵinject(ɵngcc1.Store), ɵngcc0.ɵɵinject(ɵngcc2.Actions));\n  };\n\n  DataPersistence.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DataPersistence,\n    factory: DataPersistence.ɵfac\n  });\n  /** @nocollapse */\n\n  return DataPersistence;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  DataPersistence.prototype.store;\n  /** @type {?} */\n\n  DataPersistence.prototype.actions;\n}\n/**\n * @param {?} component\n * @param {?} s\n * @return {?}\n */\n\n\nfunction findSnapshot(component, s) {\n  if (s.routeConfig && s.routeConfig.component === component) {\n    return s;\n  }\n\n  for (const c of s.children) {\n    /** @type {?} */\n    const ss = findSnapshot(component, c);\n\n    if (ss) {\n      return ss;\n    }\n  }\n\n  return null;\n}\n/**\n * @template O\n * @param {?} obj\n * @return {?}\n */\n\n\nfunction wrapIntoObservable(obj) {\n  if (!!obj && obj instanceof Observable) {\n    return obj;\n  } else if (!obj) {\n    return of();\n  } else {\n    return of(\n    /** @type {?} */\n    obj);\n  }\n} //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module"}