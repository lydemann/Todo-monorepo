{"ast":null,"code":"import { ApplicationRef, ChangeDetectorRef, EventEmitter } from '@angular/core';\nimport { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/form-field\";\nimport * as i3 from \"@angular/material/input\";\nimport * as i4 from \"@angular/material/datepicker\";\n\nclass DateErrorStateMatcher {\n  constructor(hasError$, destroy$) {\n    this.hasError = undefined;\n    hasError$.pipe(takeUntil(destroy$)).subscribe(hasError => {\n      this.hasError = hasError;\n    });\n  }\n\n  isErrorState(control, form) {\n    const isSubmitted = form && form.submitted;\n    const isInvalidAndTouched = !!(control && control.invalid && (!form || isSubmitted || control.touched));\n    return this.hasError !== undefined ? this.hasError : isInvalidAndTouched;\n  }\n\n}\n\nexport let DatePickerComponent = /*#__PURE__*/(() => {\n  class DatePickerComponent {\n    constructor(ngControl, changeDetectionRef, applicationRef) {\n      this.ngControl = ngControl;\n      this.changeDetectionRef = changeDetectionRef;\n      this.applicationRef = applicationRef;\n      this.errorMessage = 'Invalid input';\n      this.placeholder = 'Choose a date';\n      this.dateChange = new EventEmitter();\n      this.isDisabled = false; // used to display mat error\n\n      this.formControl = new FormControl('');\n      this.destroy$ = new Subject();\n      this._showErrorSubject = new BehaviorSubject(undefined);\n      this._showError$ = this._showErrorSubject.asObservable(); // tslint:disable-next-line: member-ordering\n\n      this.dateErrorStateMatcher = new DateErrorStateMatcher(this._showError$, this.destroy$.asObservable());\n      this.onTouched = Function; // tslint:disable-next-line: no-empty\n\n      this.onChange = date => {};\n\n      ngControl.valueAccessor = this;\n    }\n\n    set showError(v) {\n      this._showErrorSubject.next(v);\n    }\n\n    ngAfterViewInit() {\n      // syncing with validators on host element\n      this.formControl = this.ngControl.control;\n    }\n\n    ngOnDestroy() {\n      this.destroy$.next();\n    }\n\n    onDateChange(dateInput) {\n      const date = dateInput.value;\n      this.onChange(date);\n      this.onTouched();\n      this.dateChange.next(date);\n    }\n\n    writeValue(obj) {\n      this.date = obj;\n    }\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled) {\n      this.isDisabled = isDisabled;\n    }\n\n    runCD() {\n      this.applicationRef.tick();\n      this.changeDetectionRef.detectChanges();\n    }\n\n  }\n\n  DatePickerComponent.ɵfac = function DatePickerComponent_Factory(t) {\n    return new (t || DatePickerComponent)(i0.ɵɵdirectiveInject(i1.NgControl), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ApplicationRef));\n  };\n\n  DatePickerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DatePickerComponent,\n    selectors: [[\"app-date-picker\"]],\n    hostBindings: function DatePickerComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keyup\", function DatePickerComponent_keyup_HostBindingHandler($event) {\n          return ctx.runCD($event);\n        })(\"click\", function DatePickerComponent_click_HostBindingHandler($event) {\n          return ctx.runCD($event);\n        })(\"change\", function DatePickerComponent_change_HostBindingHandler($event) {\n          return ctx.runCD($event);\n        });\n      }\n    },\n    inputs: {\n      date: \"date\",\n      minDate: \"minDate\",\n      maxDate: \"maxDate\",\n      errorMessage: \"errorMessage\",\n      placeholder: \"placeholder\",\n      showError: \"showError\"\n    },\n    decls: 7,\n    vars: 10,\n    consts: [[\"matInput\", \"\", 3, \"matDatepicker\", \"disabled\", \"value\", \"min\", \"max\", \"formControl\", \"errorStateMatcher\", \"placeholder\", \"dateInput\"], [\"matSuffix\", \"\", 3, \"for\", \"click\"], [\"picker\", \"\"]],\n    template: function DatePickerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-form-field\")(1, \"input\", 0);\n        i0.ɵɵlistener(\"dateInput\", function DatePickerComponent_Template_input_dateInput_1_listener($event) {\n          return ctx.onDateChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"mat-error\");\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mat-datepicker-toggle\", 1);\n        i0.ɵɵlistener(\"click\", function DatePickerComponent_Template_mat_datepicker_toggle_click_4_listener() {\n          return ctx.runCD();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"mat-datepicker\", null, 2);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(6);\n\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matDatepicker\", _r0)(\"disabled\", ctx.isDisabled)(\"value\", ctx.date)(\"min\", ctx.minDate)(\"max\", ctx.maxDate)(\"formControl\", ctx.formControl)(\"errorStateMatcher\", ctx.dateErrorStateMatcher)(\"placeholder\", ctx.placeholder);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.errorMessage);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", _r0);\n      }\n    },\n    directives: [i2.MatFormField, i3.MatInput, i4.MatDatepickerInput, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlDirective, i2.MatError, i4.MatDatepickerToggle, i2.MatSuffix, i4.MatDatepicker],\n    styles: [\".error[_ngcontent-%COMP%]{border:1px solid var(--todo-warn)}\"]\n  });\n  return DatePickerComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}