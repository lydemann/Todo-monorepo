{"ast":null,"code":"import { first } from 'rxjs/operators';\nimport * as StackTrace from 'stacktrace-js';\nimport { BrowserDetectorService } from '../browser-detector/browser-detector.service';\nimport { StoreAnonymizationService } from '../store/anonymizer/store-anonymization.service';\nimport { Logger } from './logger';\nimport { SessionIdService } from './session-id.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../browser-detector/browser-detector.service\";\nimport * as i2 from \"./session-id.service\";\nimport * as i3 from \"../store/anonymizer/store-anonymization.service\";\nexport let LogService = /*#__PURE__*/(() => {\n  class LogService {\n    constructor(browserDetectorService, sessionIdService, storeAnonymizeService) {\n      this.browserDetectorService = browserDetectorService;\n      this.sessionIdService = sessionIdService;\n      this.storeAnonymizeService = storeAnonymizeService;\n      this.logger = {\n        // tslint:disable-next-line: no-empty\n        log: () => {}\n      };\n      this.browserAndVendor = 'Unknown browser';\n      this.logAsWarningSentences = [];\n      this.browserAndVendor = this.browserDetectorService.getVendorAndVersion();\n    }\n\n    initialize({\n      appName,\n      logUrl,\n      env\n    }) {\n      this.env = env;\n      this.logger = new Logger(appName, logUrl);\n    }\n\n    logHttpInfo(info, elapsedTime, requestPath) {\n      const url = location.href;\n      const logFields = Object.assign({\n        requestPath,\n        elapsedTime,\n        url\n      }, this.getStandardLogFields());\n      this.logger.log('Information', `${info}`, logFields);\n    }\n\n    logHttpError(errorMsg, requestPath, correlationId) {\n      const url = location.href;\n      const logFields = Object.assign({\n        requestPath,\n        url,\n        correlationId\n      }, this.getStandardLogFields());\n      this.logger.log('Error', errorMsg, logFields);\n    }\n\n    logErrorMsg(errorMsg) {\n      const url = location.href;\n      const logFields = Object.assign({\n        requestPath: '',\n        elapsedTime: 0,\n        url\n      }, this.getStandardLogFields());\n      this.logger.log('Error', errorMsg, logFields);\n    }\n\n    logError(error) {\n      const message = error.message ? error.message : error.toString();\n\n      if (error.status || !(error instanceof Error)) {\n        error = new Error(message);\n      }\n\n      this.getStackTrace(error).then(stackString => {\n        const errorTraceStr = `Error message:\\n${message}.\\nStack trace: ${stackString}`; // const isWarning = this.isWarning(errorTraceStr);\n        // if (isWarning) {\n        // \tthis.logWarningMsg(errorTraceStr);\n        // }\n\n        this.logErrorMsg(errorTraceStr);\n      });\n    }\n\n    logWarningMsg(errorMsg) {\n      const url = location.href;\n      const logFields = Object.assign({\n        requestPath: '',\n        elapsedTime: 0,\n        url\n      }, this.getStandardLogFields());\n      this.logger.log('Warning', errorMsg, logFields);\n    }\n\n    logInfo(info) {\n      const url = location.href;\n      const logFields = Object.assign({\n        requestPath: '',\n        elapsedTime: 0,\n        url\n      }, this.getStandardLogFields());\n      this.logger.log('Information', info, logFields);\n    }\n\n    onUserChange(userId) {\n      this.userId = userId;\n    }\n\n    isWarning(errorTraceStr) {\n      let isWarning = true; // Error comes from app\n\n      if (errorTraceStr.includes('/src/app/')) {\n        isWarning = false;\n      }\n\n      this.logAsWarningSentences.forEach(whiteListSentence => {\n        if (errorTraceStr.includes(whiteListSentence)) {\n          isWarning = true;\n        }\n      });\n      return isWarning;\n    }\n\n    getStackTrace(error) {\n      return StackTrace.fromError(error).then(stackframes => {\n        // for getting stackTrace with sourcemaps\n        const stackString = stackframes.splice(0, 10).map(sf => {\n          return sf.toString();\n        }).toString();\n        return stackString;\n      });\n    }\n\n    getStandardLogFields() {\n      let state = {};\n      this.storeAnonymizeService.getAnonymizedState().pipe(first()).subscribe(anonymizedState => {\n        state = anonymizedState;\n      });\n      return {\n        environment: this.env,\n        userId: this.userId,\n        browser: this.browserAndVendor,\n        sessionId: this.sessionIdService.sessionId,\n        state\n      };\n    }\n\n  }\n\n  LogService.ɵfac = function LogService_Factory(t) {\n    return new (t || LogService)(i0.ɵɵinject(i1.BrowserDetectorService), i0.ɵɵinject(i2.SessionIdService), i0.ɵɵinject(i3.StoreAnonymizationService));\n  };\n\n  LogService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LogService,\n    factory: LogService.ɵfac,\n    providedIn: 'root'\n  });\n  return LogService;\n})();","map":null,"metadata":{},"sourceType":"module"}