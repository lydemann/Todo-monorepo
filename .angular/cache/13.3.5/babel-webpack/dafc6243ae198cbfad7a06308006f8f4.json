{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport { TodoListActions } from './todo-list.actions';\nimport { todoListAdapter, todoListInitState } from './todo-list.model';\nexport const todoListReducer = createReducer(todoListInitState, on(TodoListActions.getTodoListRequest, state => {\n  return Object.assign(Object.assign({}, state), {\n    isLoading: true\n  });\n}), on(TodoListActions.getTodoListResponse, (state, {\n  todoList\n}) => {\n  return Object.assign(Object.assign({}, todoListAdapter.setAll(todoList, state)), {\n    isLoading: false\n  });\n}), on(TodoListActions.getTodoListFailed, (state, {\n  error\n}) => {\n  return Object.assign(Object.assign({}, state), {\n    error,\n    isLoading: false\n  });\n}), on(TodoListActions.updateTodoItemRequest, state => {\n  return Object.assign(Object.assign({}, state), {\n    isAddingTodo: true\n  });\n}), on(TodoListActions.updateTodoItemResponse, (state, {\n  todoItem\n}) => {\n  return Object.assign(Object.assign({}, todoListAdapter.upsertOne(todoItem, state)), {\n    isAddingTodo: false\n  });\n}), on(TodoListActions.updateTodoItemFailed, (state, {\n  error\n}) => {\n  return Object.assign(Object.assign({}, state), {\n    error,\n    isAddingTodo: false\n  });\n}), on(TodoListActions.addTodoItemRequest, state => {\n  return Object.assign(Object.assign({}, state), {\n    isAddingTodo: true\n  });\n}), on(TodoListActions.addTodoItemReponse, (state, {\n  todoItem\n}) => {\n  return Object.assign(Object.assign({}, todoListAdapter.upsertOne(todoItem, state)), {\n    isAddingTodo: false\n  });\n}), on(TodoListActions.deleteTodoItem, (state, {\n  todoItemId\n}) => {\n  return Object.assign(Object.assign({}, todoListAdapter.removeOne(todoItemId, state)), {\n    isAddingTodo: false\n  });\n}), on(TodoListActions.toggleCompleteTodoItem, (state, action) => {\n  const oldTodo = state.entities[action.todoItemId];\n  const newTodoState = todoListAdapter.updateOne({\n    id: action.todoItemId,\n    changes: {\n      completed: !(oldTodo === null || oldTodo === void 0 ? void 0 : oldTodo.completed)\n    }\n  }, state);\n  return Object.assign(Object.assign({}, newTodoState), {\n    isLoading: false\n  });\n}), on(TodoListActions.selectTodoForEdit, (state, action) => {\n  return Object.assign(Object.assign({}, state), {\n    selectedTodoItemId: action.todoItem.id\n  });\n}));","map":null,"metadata":{},"sourceType":"module"}