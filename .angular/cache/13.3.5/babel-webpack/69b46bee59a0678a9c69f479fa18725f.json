{"ast":null,"code":"import { ErrorHandler, Injector } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { LogService } from '../log/log.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nexport const ERROR_NOTIFICATION_DURATION = 2000;\nexport let GlobalErrorHandler = /*#__PURE__*/(() => {\n  class GlobalErrorHandler extends ErrorHandler {\n    constructor(injector, snackBar) {\n      super();\n      this.injector = injector;\n      this.snackBar = snackBar;\n    }\n\n    handleError(error, showNotification = true) {\n      try {\n        const logService = this.injector.get(LogService);\n\n        if (showNotification) {\n          // extract/map meaningful error message from error here\n          this.snackBar.open('Something went wrong', '', {\n            duration: ERROR_NOTIFICATION_DURATION,\n            panelClass: 'danger'\n          });\n        }\n\n        logService.logError(error);\n      } catch (error) {\n        super.handleError(error);\n        return;\n      }\n\n      super.handleError(error);\n    }\n\n  }\n\n  GlobalErrorHandler.ɵfac = function GlobalErrorHandler_Factory(t) {\n    return new (t || GlobalErrorHandler)(i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i1.MatSnackBar));\n  };\n\n  GlobalErrorHandler.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GlobalErrorHandler,\n    factory: GlobalErrorHandler.ɵfac\n  });\n  return GlobalErrorHandler;\n})();","map":null,"metadata":{},"sourceType":"module"}