{"ast":null,"code":"import { Injector } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport produce from 'immer';\nimport { map } from 'rxjs/operators';\nimport { FEATURE_STORE_ANONYMIZER } from './feature-store-anonymizer';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport let StoreAnonymizationService = /*#__PURE__*/(() => {\n  class StoreAnonymizationService {\n    constructor(store, injector) {\n      this.store = store;\n      this.injector = injector;\n    }\n    /**\n     * Retrieves an anonymized version of the Store's state.\n     */\n\n\n    getAnonymizedState() {\n      return this.store.pipe(select(state => state), map(rootState => this.anonymize(rootState)));\n    }\n\n    anonymize(rootState) {\n      const anonymizers = this.injector.get(FEATURE_STORE_ANONYMIZER, []);\n      return produce(rootState, draft => {\n        anonymizers.forEach(anonymizer => {\n          try {\n            anonymizer.anonymize(draft, this.injector);\n          } catch (error) {\n            // if error during anonymization, we override the feature store with an error to not leak any un-anonymized state\n            draft[anonymizer.getFeatureStateName()] = {\n              errorMsg: 'Error during anonymization',\n              error\n            };\n          }\n        });\n      });\n    }\n\n  }\n\n  StoreAnonymizationService.ɵfac = function StoreAnonymizationService_Factory(t) {\n    return new (t || StoreAnonymizationService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i0.Injector));\n  };\n\n  StoreAnonymizationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StoreAnonymizationService,\n    factory: StoreAnonymizationService.ɵfac,\n    providedIn: 'root'\n  });\n  return StoreAnonymizationService;\n})();","map":null,"metadata":{},"sourceType":"module"}